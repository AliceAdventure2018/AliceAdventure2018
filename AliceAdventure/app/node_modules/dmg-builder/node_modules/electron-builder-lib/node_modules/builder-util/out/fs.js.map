{"version":3,"file":"fs.js","sourceRoot":"","sources":["../src/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { access, chmod, copyFile as _nodeCopyFile, createReadStream, createWriteStream, ensureDir, link, lstat, readdir, readlink, stat, Stats, symlink, unlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport Mode from \"stat-mode\"\nimport { log } from \"./log\"\nimport { orNullIfFileNotExist } from \"./promise\"\n\nexport const MAX_FILE_REQUESTS = 8\nexport const CONCURRENCY = {concurrency: MAX_FILE_REQUESTS}\n\nexport type FileTransformer = (path: string) => Promise<null | string | Buffer> | null | string | Buffer\nexport type Filter = (file: string, stat: Stats) => boolean\n\nexport function unlinkIfExists(file: string) {\n  return unlink(file)\n    .catch(() => {/* ignore */})\n}\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  return orNullIfFileNotExist(stat(file))\n}\n\nexport async function exists(file: string): Promise<boolean> {\n  try {\n    await access(file)\n    return true\n  }\n  catch (e) {\n    return false\n  }\n}\n\nexport interface FileConsumer {\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any\n\n  /**\n   * @default false\n   */\n  isIncludeDir?: boolean\n}\n\nexport async function walk(initialDirPath: string, filter?: Filter | null, consumer?: FileConsumer): Promise<Array<string>> {\n  let result: Array<string> = []\n  const queue: Array<string> = [initialDirPath]\n  let addDirToResult = false\n  const isIncludeDir = consumer == null ? false : consumer.isIncludeDir === true\n  while (queue.length > 0) {\n    const dirPath = queue.pop()!\n    if (isIncludeDir) {\n      if (addDirToResult) {\n        result.push(dirPath)\n      }\n      else {\n        addDirToResult = true\n      }\n    }\n\n    const childNames = await readdir(dirPath)\n    childNames.sort()\n\n    let nodeModuleContent: Array<string> | null = null\n\n    const dirs: Array<string> = []\n    // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n    const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n      if (name === \".DS_Store\" || name === \".gitkeep\") {\n        return null\n      }\n\n      const filePath = dirPath + path.sep + name\n      return lstat(filePath)\n        .then(stat => {\n          if (filter != null && !filter(filePath, stat)) {\n            return null\n          }\n\n          const consumerResult = consumer == null ? null : consumer.consume(filePath, stat, dirPath, childNames)\n          if (consumerResult == null || !(\"then\" in consumerResult)) {\n            if (stat.isDirectory()) {\n              dirs.push(name)\n              return null\n            }\n            else {\n              return filePath\n            }\n          }\n          else {\n            return (consumerResult as Promise<any>)\n              .then((it): any => {\n                if (it != null && Array.isArray(it)) {\n                  nodeModuleContent = it\n                  return null\n                }\n\n                // asarUtil can return modified stat (symlink handling)\n                if ((it != null && \"isDirectory\" in it ? (it as Stats) : stat).isDirectory()) {\n                  dirs.push(name)\n                  return null\n                }\n                else {\n                  return filePath\n                }\n              })\n          }\n        })\n    }, CONCURRENCY)\n\n    for (const child of sortedFilePaths) {\n      if (child != null) {\n        result.push(child)\n      }\n    }\n\n    dirs.sort()\n    for (const child of dirs) {\n      queue.push(dirPath + path.sep + child)\n    }\n\n    if (nodeModuleContent != null) {\n      result = result.concat(nodeModuleContent)\n    }\n  }\n\n  return result\n}\n\nconst _isUseHardLink = process.platform !== \"win32\" && process.env.USE_HARD_LINKS !== \"false\" && (require(\"is-ci\") || process.env.USE_HARD_LINKS === \"true\")\n\nexport function copyFile(src: string, dest: string, isEnsureDir = true) {\n  return (isEnsureDir ? ensureDir(path.dirname(dest)) : Promise.resolve())\n    .then(() => copyOrLinkFile(src, dest, null, false))\n}\n\n/**\n * Hard links is used if supported and allowed.\n * File permission is fixed — allow execute for all if owner can, allow read for all if owner can.\n *\n * ensureDir is not called, dest parent dir must exists\n */\nexport function copyOrLinkFile(src: string, dest: string, stats?: Stats | null, isUseHardLink = _isUseHardLink, exDevErrorHandler?: (() => boolean) | null): Promise<any> {\n  if (stats != null) {\n    const originalModeNumber = stats.mode\n    const mode = new Mode(stats)\n    if (mode.owner.execute) {\n      mode.group.execute = true\n      mode.others.execute = true\n    }\n\n    mode.group.read = true\n    mode.others.read = true\n\n    if (originalModeNumber !== stats.mode) {\n      if (log.isDebugEnabled) {\n        const oldMode = new Mode({mode: originalModeNumber})\n        log.debug({file: dest, oldMode, mode}, \"permissions fixed from\")\n      }\n\n      // https://helgeklein.com/blog/2009/05/hard-links-and-permissions-acls/\n      // Permissions on all hard links to the same data on disk are always identical. The same applies to attributes.\n      // That means if you change the permissions/owner/attributes on one hard link, you will immediately see the changes on all other hard links.\n      if (isUseHardLink) {\n        isUseHardLink = false\n        log.debug({dest}, \"copied, but not linked, because file permissions need to be fixed\")\n      }\n    }\n  }\n\n  if (isUseHardLink) {\n    return link(src, dest)\n      .catch(e => {\n        if (e.code === \"EXDEV\") {\n          const isLog = exDevErrorHandler == null ? true : exDevErrorHandler()\n          if (isLog && log.isDebugEnabled) {\n            log.debug({error: e.message}, \"cannot copy using hard link\")\n          }\n          return doCopyFile(src, dest, stats)\n        }\n        else {\n          throw e\n        }\n      })\n  }\n  return doCopyFile(src, dest, stats)\n}\n\nfunction doCopyFile(src: string, dest: string, stats: Stats | null | undefined): Promise<any> {\n  if (_nodeCopyFile == null) {\n    return new BluebirdPromise((resolve, reject) => {\n      const reader = createReadStream(src)\n      const writer = createWriteStream(dest, stats == null ? undefined : {mode: stats!!.mode})\n      reader.on(\"error\", reject)\n      writer.on(\"error\", reject)\n      writer.on(\"open\", () => {\n        reader.pipe(writer)\n      })\n      writer.once(\"close\", resolve)\n    })\n  }\n\n  // node 8.5.0+\n  const promise = _nodeCopyFile(src, dest)\n  if (stats == null) {\n    return promise\n  }\n\n  return promise\n    .then(() => chmod(dest, stats.mode))\n}\n\nexport class FileCopier {\n  isUseHardLink: boolean\n\n  constructor(private readonly isUseHardLinkFunction?: (file: string) => boolean, private readonly transformer?: FileTransformer | null) {\n    if (isUseHardLinkFunction === USE_HARD_LINKS) {\n      this.isUseHardLink = true\n    }\n    else {\n      this.isUseHardLink = _isUseHardLink && isUseHardLinkFunction !== DO_NOT_USE_HARD_LINKS\n    }\n  }\n\n  async copy(src: string, dest: string, stat: Stats | undefined) {\n    if (this.transformer != null && stat != null && stat.isFile()) {\n      let data = this.transformer(src)\n      if (data != null) {\n        if (typeof (data as any).then === \"function\") {\n          data = await data\n        }\n\n        if (data != null) {\n          await writeFile(dest, data)\n          return\n        }\n      }\n    }\n    const isUseHardLink = (!this.isUseHardLink || this.isUseHardLinkFunction == null) ? this.isUseHardLink : this.isUseHardLinkFunction(dest)\n    await copyOrLinkFile(src, dest, stat, isUseHardLink, isUseHardLink ? () => {\n      // files are copied concurrently, so, we must not check here currentIsUseHardLink — our code can be executed after that other handler will set currentIsUseHardLink to false\n      if (this.isUseHardLink) {\n        this.isUseHardLink = false\n        return true\n      }\n      else {\n        return false\n      }\n    } : null)\n  }\n}\n\nexport interface CopyDirOptions {\n  filter?: Filter | null\n  transformer?: FileTransformer | null\n  isUseHardLink?: (file: string) => boolean\n}\n\n/**\n * Empty directories is never created.\n * Hard links is used if supported and allowed.\n */\nexport function copyDir(src: string, destination: string, options: CopyDirOptions = {}): Promise<any> {\n  const fileCopier = new FileCopier(options.isUseHardLink, options.transformer)\n\n  if (log.isDebugEnabled) {\n    log.debug({src, destination}, `copying${fileCopier.isUseHardLink ? \" using hard links\" : \"\"}`)\n  }\n\n  const createdSourceDirs = new Set<string>()\n  const links: Array<Link> = []\n  return walk(src, options.filter, {\n    consume: async (file, stat, parent) => {\n      if (!stat.isFile() && !stat.isSymbolicLink()) {\n        return\n      }\n\n      if (!createdSourceDirs.has(parent)) {\n        await ensureDir(parent.replace(src, destination))\n        createdSourceDirs.add(parent)\n      }\n\n      const destFile = file.replace(src, destination)\n      if (stat.isFile()) {\n        await fileCopier.copy(file, destFile, stat)\n      }\n      else {\n        links.push({file: destFile, link: await readlink(file)})\n      }\n    }\n  })\n    .then(() => BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY))\n}\n\nexport const DO_NOT_USE_HARD_LINKS = (file: string) => false\nexport const USE_HARD_LINKS = (file: string) => true\n\nexport interface Link {\n  readonly link: string,\n  readonly file: string\n}"]}
