{"version":3,"file":"fileMatcher.js","sourceRoot":"","sources":["../src/fileMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, log } from \"builder-util\"\nimport { copyDir, copyOrLinkFile, Filter, statOrNull } from \"builder-util/out/fs\"\nimport { mkdirs } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { Platform } from \"./core\"\nimport { Configuration, FileSet, PlatformSpecificBuildOptions } from \"./index\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { createFilter, hasMagic } from \"./util/filter\"\n\n// https://github.com/electron-userland/electron-builder/issues/733\nconst minimatchOptions = {dot: true}\n\n// noinspection SpellCheckingInspection\nexport const excludedNames = \".git,.hg,.svn,CVS,RCS,SCCS,\" +\n  \"__pycache__,.DS_Store,thumbs.db,.gitignore,.gitkeep,.gitattributes,.npmignore,\" +\n  \".idea,.vs,.flowconfig,.jshintrc,.eslintrc,.circleci,\" +\n  \".yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,package-lock.json,npm-debug.log,\" +\n  \"appveyor.yml,.travis.yml,circle.yml,.nyc_output\"\n\n/** @internal */\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  excludePatterns: Array<Minimatch> | null = null\n\n  readonly isSpecifiedAsEmptyArray: boolean\n\n  constructor(from: string, to: string, readonly macroExpander: (pattern: string) => string, patterns?: Array<string> | string | null | undefined) {\n    this.from = macroExpander(from)\n    this.to = macroExpander(to)\n    this.patterns = asArray(patterns).map(it => this.normalizePattern(it))\n    this.isSpecifiedAsEmptyArray = Array.isArray(patterns) && patterns.length === 0\n  }\n\n  normalizePattern(pattern: string) {\n    if (pattern.startsWith(\"./\")) {\n      pattern = pattern.substring(\"./\".length)\n    }\n    return path.posix.normalize(this.macroExpander(pattern.replace(/\\\\/g, \"/\")))\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(this.normalizePattern(pattern))\n  }\n\n  prependPattern(pattern: string) {\n    this.patterns.unshift(this.normalizePattern(pattern))\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  containsOnlyIgnore(): boolean {\n    return !this.isEmpty() && this.patterns.find(it => !it.startsWith(\"!\")) == null\n  }\n\n  computeParsedPatterns(result: Array<Minimatch>, fromDir?: string): void {\n    const relativeFrom = fromDir == null ? null : path.relative(fromDir, this.from)\n\n    if (this.patterns.length === 0 && relativeFrom != null) {\n      // file mappings, from here is a file\n      result.push(new Minimatch(relativeFrom, minimatchOptions))\n      return\n    }\n\n    for (let pattern of this.patterns) {\n      if (relativeFrom != null) {\n        pattern = path.join(relativeFrom, pattern)\n      }\n\n      const parsedPattern = new Minimatch(pattern, minimatchOptions)\n      result.push(parsedPattern)\n\n      // do not add if contains dot (possibly file if has extension)\n      if (!pattern.includes(\".\") && !hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        result.push(new Minimatch(`${pattern}/**/*`, minimatchOptions))\n      }\n    }\n  }\n\n  createFilter(): Filter {\n    const parsedPatterns: Array<Minimatch> = []\n    this.computeParsedPatterns(parsedPatterns)\n    return createFilter(this.from, parsedPatterns, this.excludePatterns)\n  }\n\n  toString() {\n    return `from: ${this.from}, to: ${this.to}, patterns: ${this.patterns.join(\", \")}`\n  }\n}\n\n/** @internal */\nexport function getMainFileMatchers(appDir: string, destination: string, macroExpander: (pattern: string) => string, platformSpecificBuildOptions: PlatformSpecificBuildOptions, platformPackager: PlatformPackager<any>, outDir: string, isElectronCompile: boolean): Array<FileMatcher> {\n  const packager = platformPackager.info\n  const buildResourceDir = path.resolve(packager.projectDir, packager.buildResourcesDir)\n\n  let matchers = packager.isPrepackedAppAsar ? null : getFileMatchers(packager.config, \"files\", appDir, destination, {\n    macroExpander,\n    customBuildOptions: platformSpecificBuildOptions,\n    outDir,\n  })\n  if (matchers == null) {\n    matchers = [new FileMatcher(appDir, destination, macroExpander)]\n  }\n\n  const matcher = matchers[0]\n  // add default patterns, but only if from equals to app dir\n  if (matcher.from !== appDir) {\n    return matchers\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1741#issuecomment-311111418 so, do not use inclusive patterns\n  const patterns = matcher.patterns\n\n  const customFirstPatterns: Array<string> = []\n  // electron-webpack - we need to copy only package.json and node_modules from root dir (and these files are added by default), so, explicit empty array is specified\n  if (!matcher.isSpecifiedAsEmptyArray && (matcher.isEmpty() || matcher.containsOnlyIgnore())) {\n    customFirstPatterns.push(\"**/*\")\n  }\n  else {\n    // prependPattern - user pattern should be after to be able to override\n    // do not use **/node_modules/**/* because if pattern starts with **, all not explicitly excluded directories will be traversed (performance + empty dirs will be included into the asar)\n    customFirstPatterns.push(\"node_modules/**/*\")\n    if (!patterns.includes(\"package.json\")) {\n      patterns.push(\"package.json\")\n    }\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1482\n  const relativeBuildResourceDir = path.relative(matcher.from, buildResourceDir)\n  if (relativeBuildResourceDir.length !== 0 && !relativeBuildResourceDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeBuildResourceDir}{,/**/*}`)\n  }\n\n  const relativeOutDir = matcher.normalizePattern(path.relative(packager.projectDir, outDir))\n  if (!relativeOutDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeOutDir}{,/**/*}`)\n  }\n\n  // add our default exclusions after last user possibly defined \"all\"/permissive pattern\n  let insertIndex = 0\n  for (let i = patterns.length - 1; i >= 0; i--) {\n    if (patterns[i].startsWith(\"**/\")) {\n      insertIndex = i + 1\n      break\n    }\n  }\n  patterns.splice(insertIndex, 0, ...customFirstPatterns)\n\n  // not moved to copyNodeModules because depends on platform packager (for now, not easy)\n  if (platformPackager.platform !== Platform.WINDOWS) {\n    // https://github.com/electron-userland/electron-builder/issues/1738\n    patterns.push(\"!**/node_modules/**/*.{dll,exe}\")\n  }\n\n  patterns.push(`!**/*.{iml,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,suo,xproj,cc${packager.config.includePdb === true ? \"\" : \",pdb\"}`)\n  patterns.push(\"!**/._*\")\n  patterns.push(\"!**/electron-builder.{yaml,yml,json,json5,toml}\")\n  //noinspection SpellCheckingInspection\n  patterns.push(`!**/{${excludedNames}}`)\n\n  if (isElectronCompile) {\n    patterns.push(\"!.cache{,/**/*}\")\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1969\n  // exclude ony for app root, use .yarnclean to clean node_modules\n  patterns.push(\"!.editorconfig\")\n\n  const debugLogger = packager.debugLogger\n  if (debugLogger.enabled) {\n    //tslint:disable-next-line:no-invalid-template-strings\n    debugLogger.add(`${macroExpander(\"${arch}\")}.firstOrDefaultFilePatterns`, patterns)\n  }\n  return matchers\n}\n\nexport interface GetFileMatchersOptions {\n  readonly macroExpander: (pattern: string) => string\n  readonly customBuildOptions: PlatformSpecificBuildOptions\n  readonly outDir: string\n}\n\n/** @internal */\nexport function getFileMatchers(config: Configuration, name: \"files\" | \"extraFiles\" | \"extraResources\" | \"asarUnpack\", defaultSrc: string, defaultDestination: string, options: GetFileMatchersOptions): Array<FileMatcher> | null {\n  const globalPatterns: Array<string | FileSet> | string | null | undefined | FileSet = (config as any)[name]\n  const platformSpecificPatterns: Array<string | FileSet> | string | null | undefined = (options.customBuildOptions as any)[name]\n\n  const defaultMatcher = new FileMatcher(defaultSrc, defaultDestination, options.macroExpander)\n  const fileMatchers: Array<FileMatcher> = []\n\n  function addPatterns(patterns: Array<string | FileSet> | string | null | undefined | FileSet) {\n    if (patterns == null) {\n      return\n    }\n    else if (!Array.isArray(patterns)) {\n      if (typeof patterns === \"string\") {\n        defaultMatcher.addPattern(patterns)\n        return\n      }\n      patterns = [patterns]\n    }\n\n    for (const pattern of patterns) {\n      if (typeof pattern === \"string\") {\n        // use normalize to transform ./foo to foo\n        defaultMatcher.addPattern(pattern)\n      }\n      else if (name === \"asarUnpack\") {\n        throw new Error(`Advanced file copying not supported for \"${name}\"`)\n      }\n      else {\n        const from = pattern.from == null ? defaultSrc : path.resolve(defaultSrc, pattern.from)\n        const to = pattern.to == null ? defaultDestination : path.resolve(defaultDestination, pattern.to)\n        fileMatchers.push(new FileMatcher(from, to, options.macroExpander, pattern.filter))\n      }\n    }\n  }\n\n  addPatterns(globalPatterns)\n  addPatterns(platformSpecificPatterns)\n\n  if (!defaultMatcher.isEmpty()) {\n    // default matcher should be first in the array\n    fileMatchers.unshift(defaultMatcher)\n  }\n\n  // we cannot exclude the whole out dir, because sometimes users want to use some file in the out dir in the patterns\n  const relativeOutDir = defaultMatcher.normalizePattern(path.relative(defaultSrc, options.outDir))\n  if (!relativeOutDir.startsWith(\".\")) {\n    defaultMatcher.addPattern(`!${relativeOutDir}/*-unpacked{,/**/*}`)\n  }\n\n  return fileMatchers.length === 0 ? null : fileMatchers\n}\n\n/** @internal */\nexport function copyFiles(matchers: Array<FileMatcher> | null): Promise<any> {\n  if (matchers == null || matchers.length === 0) {\n    return Promise.resolve()\n  }\n\n  return BluebirdPromise.map(matchers, async (matcher: FileMatcher) => {\n    const fromStat = await statOrNull(matcher.from)\n    if (fromStat == null) {\n      log.warn({from: matcher.from}, `file source doesn't exist`)\n      return\n    }\n\n    if (fromStat.isFile()) {\n      const toStat = await statOrNull(matcher.to)\n      // https://github.com/electron-userland/electron-builder/issues/1245\n      if (toStat != null && toStat.isDirectory()) {\n        return await copyOrLinkFile(matcher.from, path.join(matcher.to, path.basename(matcher.from)), fromStat)\n      }\n\n      await mkdirs(path.dirname(matcher.to))\n      return await copyOrLinkFile(matcher.from, matcher.to, fromStat)\n    }\n\n    if (matcher.isEmpty() || matcher.containsOnlyIgnore()) {\n      matcher.prependPattern(\"**/*\")\n    }\n    log.debug({matcher}, \"copying files using pattern\")\n    return await copyDir(matcher.from, matcher.to, {filter: matcher.createFilter()})\n  })\n}"]}
