{"version":3,"file":"windowsCodeSign.js","sourceRoot":"","sources":["../src/windowsCodeSign.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, isMacOsSierra, log } from \"builder-util\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { computeToolEnv, ToolInfo } from \"builder-util/out/bundledTool\"\nimport { rename } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport * as os from \"os\"\nimport * as path from \"path\"\nimport { WindowsConfiguration } from \"./options/winOptions\"\nimport { resolveFunction } from \"./platformPackager\"\nimport { isUseSystemSigncode } from \"./util/flags\"\nimport { VmManager } from \"./vm/vm\"\nimport { WinPackager } from \"./winPackager\"\n\nexport function getSignVendorPath() {\n  //noinspection SpellCheckingInspection\n  return getBinFromGithub(\"winCodeSign\", \"2.0.0\", \"QT51iAVlWZlKeip3FPc8FHG/HKhCdWR/Wg+cevhrKHQ1d/oHl49EqXgeztO//DrdyN1X+GCvglaHifXnWR5VXQ==\")\n}\n\nexport type CustomWindowsSign = (configuration: CustomWindowsSignTaskConfiguration) => Promise<any>\n\nexport interface WindowsSignOptions {\n  readonly path: string\n\n  readonly name?: string | null\n  readonly cscInfo?: FileCodeSigningInfo | CertificateFromStoreInfo | null\n  readonly site?: string | null\n\n  readonly options: WindowsConfiguration\n}\n\nexport interface WindowsSignTaskConfiguration extends WindowsSignOptions {\n  // set if output path differs from input (e.g. osslsigncode cannot sign file inplace)\n  resultOutputPath?: string\n\n  hash: string\n  isNest: boolean\n}\n\nexport interface CustomWindowsSignTaskConfiguration extends WindowsSignTaskConfiguration {\n  computeSignToolArgs(isWin: boolean): Array<string>\n}\n\nexport async function sign(options: WindowsSignOptions, packager: WinPackager) {\n  let hashes = options.options.signingHashAlgorithms\n  // msi does not support dual-signing\n  if (options.path.endsWith(\".msi\")) {\n    hashes = [hashes != null && !hashes.includes(\"sha1\") ? \"sha256\" : \"sha1\"]\n  }\n  else if (options.path.endsWith(\".appx\")) {\n    hashes = [\"sha256\"]\n  }\n  else if (hashes == null) {\n    hashes = [\"sha1\", \"sha256\"]\n  }\n  else {\n    hashes = Array.isArray(hashes) ? hashes : [hashes]\n  }\n\n  function defaultExecutor(configuration: CustomWindowsSignTaskConfiguration) {\n    return doSign(configuration, packager)\n  }\n\n  const executor = resolveFunction(options.options.sign) || defaultExecutor\n  let isNest = false\n  for (const hash of hashes) {\n    const taskConfiguration: WindowsSignTaskConfiguration = {...options, hash, isNest}\n    await executor({\n      ...taskConfiguration,\n      computeSignToolArgs: isWin => computeSignToolArgs(taskConfiguration, isWin)\n    })\n    isNest = true\n    if (taskConfiguration.resultOutputPath != null) {\n      await rename(taskConfiguration.resultOutputPath, options.path)\n    }\n  }\n}\n\nexport interface FileCodeSigningInfo {\n  readonly file: string\n  readonly password: string | null\n}\n\nexport interface CertificateFromStoreInfo {\n  thumbprint: string\n  subject: string\n  store: string\n  isLocalMachineStore: boolean\n}\n\nexport async function getCertificateFromStoreInfo(options: WindowsConfiguration, vm: VmManager): Promise<CertificateFromStoreInfo> {\n  const certificateSubjectName = options.certificateSubjectName\n  const certificateSha1 = options.certificateSha1\n  // ExcludeProperty doesn't work, so, we cannot exclude RawData, it is ok\n  // powershell can return object if the only item\n  const rawResult = await vm.exec(\"powershell.exe\", [\"Get-ChildItem -Recurse Cert: -CodeSigningCert | Select-Object -Property Subject,PSParentPath,Thumbprint | ConvertTo-Json -Compress\"])\n  const certList = rawResult.length === 0 ? [] : asArray<CertInfo>(JSON.parse(rawResult))\n  for (const certInfo of certList) {\n    if (certificateSubjectName != null) {\n      if (!certInfo.Subject.includes(certificateSubjectName)) {\n        continue\n      }\n    }\n    else if (certInfo.Thumbprint !== certificateSha1) {\n      continue\n    }\n\n    const parentPath = certInfo.PSParentPath\n    const store = parentPath.substring(parentPath.lastIndexOf(\"\\\\\") + 1)\n    log.debug({store, PSParentPath: parentPath}, \"auto-detect certificate store\")\n    // https://github.com/electron-userland/electron-builder/issues/1717\n    const isLocalMachineStore = (parentPath.includes(\"Certificate::LocalMachine\"))\n    log.debug(null, \"auto-detect using of LocalMachine store\")\n    return {\n      thumbprint: certInfo.Thumbprint,\n      subject: certInfo.Subject,\n      store,\n      isLocalMachineStore\n    }\n  }\n\n  throw new Error(`Cannot find certificate ${certificateSubjectName || certificateSha1}, all certs: ${rawResult}`)\n}\n\nasync function doSign(configuration: CustomWindowsSignTaskConfiguration, packager: WinPackager) {\n  // https://github.com/electron-userland/electron-builder/pull/1944\n  const timeout = parseInt(process.env.SIGNTOOL_TIMEOUT as any, 10) || 10 * 60 * 1000\n\n  let tool: string\n  let args: Array<string>\n  let env = process.env\n  let vm: VmManager\n  if (configuration.path.endsWith(\".appx\") || !(\"file\" in configuration.cscInfo!!) /* certificateSubjectName and other such options */) {\n    vm = await packager.vm.value\n    tool = getWinSignTool(await getSignVendorPath())\n    args = computeSignToolArgs(configuration, true, vm)\n  }\n  else {\n    vm = new VmManager()\n    const toolInfo = await getToolPath()\n    tool = toolInfo.path\n    args = configuration.computeSignToolArgs(process.platform === \"win32\")\n    if (toolInfo.env != null) {\n      env = toolInfo.env\n    }\n  }\n\n  try {\n    await vm.exec(tool, args, {timeout, env})\n  }\n  catch (e) {\n    if (e.message.includes(\"The file is being used by another process\")) {\n      await new BluebirdPromise((resolve, reject) => {\n        setTimeout(() => {\n          vm.exec(tool, args, {timeout, env})\n            .then(resolve)\n            .catch(reject)\n        }, 2000)\n      })\n    }\n    throw e\n  }\n}\n\ninterface CertInfo {\n  Subject: string\n  Thumbprint: string\n  PSParentPath: string\n}\n\n// on windows be aware of http://stackoverflow.com/a/32640183/1910191\nfunction computeSignToolArgs(options: WindowsSignTaskConfiguration, isWin: boolean, vm: VmManager = new VmManager()): Array<string> {\n  const inputFile = vm.toVmFile(options.path)\n  const outputPath = isWin ? inputFile : getOutputPath(inputFile, options.hash)\n  if (!isWin) {\n    options.resultOutputPath = outputPath\n  }\n\n  const args = isWin ? [\"sign\"] : [\"-in\", inputFile, \"-out\", outputPath]\n\n  if (process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n    const timestampingServiceUrl = options.options.timeStampServer || \"http://timestamp.verisign.com/scripts/timstamp.dll\"\n    if (isWin) {\n      args.push(options.isNest || options.hash === \"sha256\" ? \"/tr\" : \"/t\", options.isNest || options.hash === \"sha256\" ? (options.options.rfc3161TimeStampServer || \"http://timestamp.comodoca.com/rfc3161\") : timestampingServiceUrl)\n    }\n    else {\n      args.push(\"-t\", timestampingServiceUrl)\n    }\n  }\n\n  const certificateFile = (options.cscInfo as FileCodeSigningInfo).file\n  if (certificateFile == null) {\n    const cscInfo = (options.cscInfo as CertificateFromStoreInfo)\n    const subjectName = cscInfo.thumbprint\n    if (!isWin) {\n      throw new Error(`${subjectName == null ? \"certificateSha1\" : \"certificateSubjectName\"} supported only on Windows`)\n    }\n\n    args.push(\"/sha1\", cscInfo.thumbprint)\n    args.push(\"/s\", cscInfo.store)\n    if (cscInfo.isLocalMachineStore) {\n      args.push(\"/sm\")\n    }\n  }\n  else {\n    const certExtension = path.extname(certificateFile)\n    if (certExtension === \".p12\" || certExtension === \".pfx\") {\n      args.push(isWin ? \"/f\" : \"-pkcs12\", vm.toVmFile(certificateFile))\n    }\n    else {\n      throw new Error(`Please specify pkcs12 (.p12/.pfx) file, ${certificateFile} is not correct`)\n    }\n  }\n\n  if (!isWin || options.hash !== \"sha1\") {\n    args.push(isWin ? \"/fd\" : \"-h\", options.hash)\n    if (isWin && process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n      args.push(\"/td\", \"sha256\")\n    }\n  }\n\n  if (options.name) {\n    args.push(isWin ? \"/d\" : \"-n\", options.name)\n  }\n\n  if (options.site) {\n    args.push(isWin ? \"/du\" : \"-i\", options.site)\n  }\n\n  // msi does not support dual-signing\n  if (options.isNest) {\n    args.push(isWin ? \"/as\" : \"-nest\")\n  }\n\n  const password = options.cscInfo == null ? null : (options.cscInfo as FileCodeSigningInfo).password\n  if (password) {\n    args.push(isWin ? \"/p\" : \"-pass\", password)\n  }\n\n  if (options.options.additionalCertificateFile) {\n    args.push(isWin ? \"/ac\" : \"-ac\", vm.toVmFile(options.options.additionalCertificateFile))\n  }\n\n  const httpsProxyFromEnv = process.env.HTTPS_PROXY\n  if (!isWin && httpsProxyFromEnv != null && httpsProxyFromEnv.length) {\n    args.push(\"-p\", httpsProxyFromEnv)\n  }\n\n  if (isWin) {\n    // must be last argument\n    args.push(inputFile)\n  }\n\n  return args\n}\n\nfunction getOutputPath(inputPath: string, hash: string) {\n  const extension = path.extname(inputPath)\n  return path.join(path.dirname(inputPath), `${path.basename(inputPath, extension)}-signed-${hash}${extension}`)\n}\n\n/** @internal */\nexport function isOldWin6() {\n  const winVersion = os.release()\n  return winVersion.startsWith(\"6.\") && !winVersion.startsWith(\"6.3\")\n}\n\nfunction getWinSignTool(vendorPath: string): string {\n  // use modern signtool on Windows Server 2012 R2 to be able to sign AppX\n  if (isOldWin6()) {\n    return path.join(vendorPath, \"windows-6\", \"signtool.exe\")\n  }\n  else {\n    return path.join(vendorPath, \"windows-10\", process.arch, \"signtool.exe\")\n  }\n}\n\nasync function getToolPath(): Promise<ToolInfo> {\n  if (isUseSystemSigncode()) {\n    return {path: \"osslsigncode\"}\n  }\n\n  const result = process.env.SIGNTOOL_PATH\n  if (result) {\n    return {path: result}\n  }\n\n  const vendorPath = await getSignVendorPath()\n  if (process.platform === \"win32\") {\n    // use modern signtool on Windows Server 2012 R2 to be able to sign AppX\n    return {path: getWinSignTool(vendorPath)}\n  }\n  else if (process.platform === \"darwin\") {\n    let suffix: string | null = null\n    try {\n      if (await isMacOsSierra()) {\n        const toolDirPath = path.join(vendorPath, process.platform, \"10.12\")\n        return {\n          path: path.join(toolDirPath, \"osslsigncode\"),\n          env: computeToolEnv([path.join(toolDirPath, \"lib\")]),\n        }\n      }\n      else if (isCi) {\n        // not clear for what we do this instead of using version detection\n        suffix = \"ci\"\n      }\n    }\n    catch (e) {\n      log.warn(`${e.stack || e}`)\n    }\n    return {path: path.join(vendorPath, process.platform, `${suffix == null ? \"\" : `${suffix}/`}osslsigncode`)}\n  }\n  else {\n    return {path: path.join(vendorPath, process.platform, \"osslsigncode\")}\n  }\n}\n"]}
