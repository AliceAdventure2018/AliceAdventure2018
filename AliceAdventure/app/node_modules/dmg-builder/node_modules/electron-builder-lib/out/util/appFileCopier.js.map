{"version":3,"file":"appFileCopier.js","sourceRoot":"","sources":["../../src/util/appFileCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AsyncTaskManager } from \"builder-util\"\nimport { CONCURRENCY, FileCopier, Link, MAX_FILE_REQUESTS } from \"builder-util/out/fs\"\nimport { ensureDir, readlink, symlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { copyFileOrData } from \"../asar/asarUtil\"\nimport { Packager } from \"../packager\"\nimport { ensureEndSlash, NODE_MODULES_PATTERN, ResolvedFileSet } from \"./AppFileCopierHelper\"\n\nexport function getDestinationPath(file: string, fileSet: ResolvedFileSet) {\n  if (file === fileSet.src) {\n    return fileSet.destination\n  }\n  else {\n    const src = ensureEndSlash(fileSet.src)\n    const dest = ensureEndSlash(fileSet.destination)\n    if (file.startsWith(src)) {\n      return dest + file.substring(src.length)\n    }\n    else {\n      // hoisted node_modules\n      // not lastIndexOf, to ensure that nested module (top-level module depends on) copied to parent node_modules, not to top-level directory\n      // project https://github.com/angexis/punchcontrol/commit/cf929aba55c40d0d8901c54df7945e1d001ce022\n      const index = file.indexOf(NODE_MODULES_PATTERN)\n      if (index < 0) {\n        throw new Error(`File \"${file}\" not under the source directory \"${fileSet.src}\"`)\n      }\n      return dest + file.substring(index + 1 /* leading slash */)\n    }\n  }\n}\n\nexport async function copyAppFiles(fileSet: ResolvedFileSet, packager: Packager) {\n  const metadata = fileSet.metadata\n  const transformedFiles = fileSet.transformedFiles\n  // search auto unpacked dir\n  const taskManager = new AsyncTaskManager(packager.cancellationToken)\n  const createdParentDirs = new Set<string>()\n\n  const fileCopier = new FileCopier()\n  const links: Array<Link> = []\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const sourceFile = fileSet.files[i]\n    const stat = metadata.get(sourceFile)\n    if (stat == null) {\n      // dir\n      continue\n    }\n\n    const destinationFile = getDestinationPath(sourceFile, fileSet)\n    if (stat.isFile()) {\n      const fileParent = path.dirname(destinationFile)\n      if (!createdParentDirs.has(fileParent)) {\n        createdParentDirs.add(fileParent)\n        await ensureDir(fileParent)\n      }\n\n      taskManager.addTask(copyFileOrData(fileCopier, transformedFiles == null ? null : transformedFiles.get(i), sourceFile, destinationFile, stat))\n      if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n        await taskManager.awaitTasks()\n      }\n    }\n    else if (stat.isSymbolicLink()) {\n      links.push({file: destinationFile, link: await readlink(sourceFile)})\n    }\n  }\n\n  if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n    await taskManager.awaitTasks()\n  }\n  if (links.length > 0) {\n    BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY)\n  }\n}"]}
