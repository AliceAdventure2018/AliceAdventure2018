{"version":3,"file":"AppFileCopierHelper.js","sourceRoot":"","sources":["../../src/util/AppFileCopierHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { log } from \"builder-util\"\nimport { CONCURRENCY, FileTransformer, statOrNull, walk } from \"builder-util/out/fs\"\nimport { ensureDir, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { createElectronCompilerHost } from \"../fileTransformer\"\nimport { Packager } from \"../packager\"\nimport { AppFileWalker } from \"./AppFileWalker\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport { Dependency } from \"./packageDependencies\"\n\n/** @internal */\nexport const NODE_MODULES_PATTERN = `${path.sep}node_modules${path.sep}`\n\n// os path separator is used\nexport interface ResolvedFileSet {\n  src: string\n  destination: string\n\n  files: Array<string>\n  metadata: Map<string, Stats>\n  transformedFiles?: Map<number, string | Buffer> | null\n}\n\nexport async function computeFileSets(matchers: Array<FileMatcher>, transformer: FileTransformer, packager: Packager, isElectronCompile: boolean): Promise<Array<ResolvedFileSet>> {\n  const fileSets: Array<ResolvedFileSet> = []\n  let hoistedNodeModuleFileSets: Array<ResolvedFileSet> | null = null\n  let isHoistedNodeModuleChecked = false\n  for (const matcher of matchers) {\n    const fileWalker = new AppFileWalker(matcher, packager)\n\n    const fromStat = await statOrNull(matcher.from)\n    if (fromStat == null) {\n      log.debug({directory: matcher.from, reason: \"doesn't exist\"}, `skipped copying`)\n      continue\n    }\n\n    const files = await walk(matcher.from, fileWalker.filter, fileWalker)\n    const metadata = fileWalker.metadata\n\n    // https://github.com/electron-userland/electron-builder/issues/2205 Support for hoisted node_modules (lerna + yarn workspaces)\n    // if no node_modules in the app dir, it means that probably dependencies are hoisted\n    // check that main node_modules doesn't exist in addition to isNodeModulesHandled because isNodeModulesHandled will be false if node_modules dir is ignored by filter\n    // here isNodeModulesHandled is required only because of performance reasons (avoid stat call)\n    if (!isHoistedNodeModuleChecked && matcher.from === packager.appDir && !fileWalker.isNodeModulesHandled) {\n      isHoistedNodeModuleChecked = true\n      if ((await statOrNull(path.join(packager.appDir, \"node_modules\"))) == null) {\n        // in the prepacked mode no package.json\n        const packageJsonStat = await statOrNull(path.join(packager.appDir, \"package.json\"))\n        if (packageJsonStat != null && packageJsonStat.isFile()) {\n          hoistedNodeModuleFileSets = await copyHoistedNodeModules(packager, matcher)\n        }\n      }\n    }\n\n    const transformedFiles = new Map<number, string | Buffer>()\n    await BluebirdPromise.filter(files, (it, index) => {\n      const fileStat = metadata.get(it)\n      if (fileStat == null || !fileStat.isFile()) {\n        return false\n      }\n\n      const transformedValue = transformer(it)\n      if (transformedValue == null) {\n        return false\n      }\n\n      if (typeof transformedValue === \"object\" && \"then\" in transformedValue) {\n        return (transformedValue as BluebirdPromise<any>)\n          .then(it => {\n            if (it != null) {\n              transformedFiles.set(index, it)\n            }\n            return false\n          })\n      }\n      transformedFiles.set(index, transformedValue as string | Buffer)\n      return false\n    }, CONCURRENCY)\n\n    fileSets.push(validateFileSet({src: matcher.from, files, metadata, transformedFiles, destination: matcher.to}))\n  }\n\n  if (isElectronCompile) {\n    // cache files should be first (better IO)\n    fileSets.unshift(await compileUsingElectronCompile(fileSets[0], packager))\n  }\n  if (hoistedNodeModuleFileSets != null) {\n    return fileSets.concat(hoistedNodeModuleFileSets)\n  }\n  return fileSets\n}\n\nfunction validateFileSet(fileSet: ResolvedFileSet): ResolvedFileSet {\n  if (fileSet.src == null || fileSet.src.length === 0) {\n    throw new Error(\"fileset src is empty\")\n  }\n  return fileSet\n}\n\nasync function copyHoistedNodeModules(packager: Packager, mainMatcher: FileMatcher): Promise<Array<ResolvedFileSet>> {\n  const productionDeps = await packager.productionDeps.value\n  const rootPathToCopier = new Map<string, Array<Dependency>>()\n  for (const dep of productionDeps) {\n    const index = dep.path.indexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      throw new Error(\"cannot find node_modules in the path \" + dep.path)\n    }\n\n    const root = dep.path.substring(0, index)\n    let list = rootPathToCopier.get(root)\n    if (list == null) {\n      list = []\n      rootPathToCopier.set(root, list)\n    }\n    list.push(dep)\n  }\n\n  // mapSeries instead of map because copyNodeModules is concurrent and so, no need to increase queue/pressure\n  return await BluebirdPromise.mapSeries(rootPathToCopier.keys(), async source => {\n    // use main matcher patterns, so, user can exclude some files in such hoisted node modules\n    const matcher = new FileMatcher(source, mainMatcher.to, mainMatcher.macroExpander, mainMatcher.patterns)\n    const copier = new NodeModuleCopyHelper(matcher, packager)\n    const files = await copier.collectNodeModules(rootPathToCopier.get(source)!!)\n    return validateFileSet({src: matcher.from, destination: matcher.to, files, metadata: copier.metadata})\n  })\n}\n\nconst BOWER_COMPONENTS_PATTERN = `${path.sep}bower_components${path.sep}`\n/** @internal */\nexport const ELECTRON_COMPILE_SHIM_FILENAME = \"__shim.js\"\n\nasync function compileUsingElectronCompile(mainFileSet: ResolvedFileSet, packager: Packager): Promise<ResolvedFileSet> {\n  log.info(\"compiling using electron-compile\")\n\n  const electronCompileCache = await packager.tempDirManager.getTempDir({prefix: \"electron-compile-cache\"})\n  const cacheDir = path.join(electronCompileCache, \".cache\")\n  // clear and create cache dir\n  await ensureDir(cacheDir)\n  const compilerHost = await createElectronCompilerHost(mainFileSet.src, cacheDir)\n  const nextSlashIndex = mainFileSet.src.length + 1\n  // pre-compute electron-compile to cache dir - we need to process only subdirectories, not direct files of app dir\n  await BluebirdPromise.map(mainFileSet.files, file => {\n    if (file.includes(NODE_MODULES_PATTERN) || file.includes(BOWER_COMPONENTS_PATTERN)\n      || !file.includes(path.sep, nextSlashIndex) // ignore not root files\n      || !mainFileSet.metadata.get(file)!.isFile()) {\n      return null\n    }\n    return compilerHost.compile(file)\n      .then(() => null)\n  }, CONCURRENCY)\n\n  await compilerHost.saveConfiguration()\n\n  const metadata = new Map<string, Stats>()\n  const cacheFiles = await walk(cacheDir, file => !file.startsWith(\".\"), {\n    consume: (file, fileStat) => {\n      if (fileStat.isFile()) {\n        metadata.set(file, fileStat)\n      }\n      return null\n    }\n  })\n\n  // add shim\n  const shimPath = `${mainFileSet.src}${path.sep}${ELECTRON_COMPILE_SHIM_FILENAME}`\n  mainFileSet.files.push(shimPath)\n  mainFileSet.metadata.set(shimPath, {isFile: () => true, isDirectory: () => false, isSymbolicLink: () => false} as any)\n  if (mainFileSet.transformedFiles == null) {\n    mainFileSet.transformedFiles = new Map()\n  }\n  mainFileSet.transformedFiles.set(mainFileSet.files.length - 1, `\n'use strict';\nrequire('electron-compile').init(__dirname, require('path').resolve(__dirname, '${packager.metadata.main || \"index\"}'), true);\n`)\n  return {src: electronCompileCache, files: cacheFiles, metadata, destination: mainFileSet.destination}\n}\n\n// sometimes, destination may not contain path separator in the end (path to folder), but the src does. So let's ensure paths have path separators in the end\nexport function ensureEndSlash(s: string) {\n  return s === \"\" || s.endsWith(path.sep) ? s : (s + path.sep)\n}\n"]}
