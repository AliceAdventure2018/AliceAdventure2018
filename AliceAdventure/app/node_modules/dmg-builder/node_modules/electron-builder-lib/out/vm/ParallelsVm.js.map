{"version":3,"file":"ParallelsVm.js","sourceRoot":"","sources":["../../src/vm/ParallelsVm.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, spawn, DebugLogger, ExtraSpawnOptions, log } from \"builder-util\"\nimport { SpawnOptions, execFileSync, ExecFileOptions } from \"child_process\"\nimport { VmManager } from \"./vm\"\n\n/** @internal */\nexport async function parseVmList(debugLogger: DebugLogger) {\n  // do not log output if debug - it is huge, logged using debugLogger\n  let rawList = await exec(\"prlctl\", [\"list\", \"-i\", \"-s\", \"name\"], undefined, false)\n  debugLogger.add(\"parallels.list\", rawList)\n\n  rawList = rawList.substring(rawList.indexOf(\"ID:\"))\n\n  // let match: Array<string> | null\n  const result: Array<ParallelsVm> = []\n  for (const info of rawList.split(\"\\n\\n\").map(it => it.trim()).filter(it => it.length > 0)) {\n    const vm: any = {}\n    for (const line of info.split(\"\\n\")) {\n      const meta = /^([^:(\"]+): (.*)$/.exec(line)\n      if (meta == null) {\n        continue\n      }\n\n      const key = meta[1].toLowerCase()\n      if (key === \"id\" || key === \"os\" || key === \"name\" || key === \"state\" || key === \"name\") {\n        vm[key] = meta[2].trim()\n      }\n    }\n    result.push(vm)\n  }\n  return result\n}\n\n/** @internal */\nexport class ParallelsVmManager extends VmManager {\n  private startPromise: Promise<any>\n\n  private isExitHookAdded = false\n\n  constructor(private readonly vm: ParallelsVm) {\n    super()\n\n    this.startPromise = this.doStartVm()\n  }\n\n  get pathSep(): string {\n    return \"/\"\n  }\n\n  private handleExecuteError(error: Error): any {\n    if (error.message.includes(\"Unable to open new session in this virtual machine\")) {\n      throw new Error(`Please ensure that your are logged in \"${this.vm.name}\" parallels virtual machine. In the future please do not stop VM, but suspend.\\n\\n${error.message}`)\n    }\n\n    log.warn(\"ensure that 'Share folders' is set to 'All Disks', see https://goo.gl/E6XphP\")\n    throw error\n  }\n\n  async exec(file: string, args: Array<string>, options?: ExecFileOptions): Promise<string> {\n    await this.ensureThatVmStarted()\n    // it is important to use \"--current-user\" to execute command under logged in user - to access certs.\n    return await exec(\"prlctl\", [\"exec\", this.vm.id, \"--current-user\", file.startsWith(\"/\") ? macPathToParallelsWindows(file) : file].concat(args), options)\n      .catch(error => this.handleExecuteError(error))\n  }\n\n  async spawn(file: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    await this.ensureThatVmStarted()\n    return await spawn(\"prlctl\", [\"exec\", this.vm.id, file].concat(args), options, extraOptions)\n      .catch(error => this.handleExecuteError(error))\n  }\n\n  private async doStartVm() {\n    const vmId = this.vm.id\n    const state = this.vm.state\n    if (state === \"running\") {\n      return\n    }\n\n    if (!this.isExitHookAdded) {\n      this.isExitHookAdded = true\n      require(\"async-exit-hook\")((callback: (() => void) | null) => {\n        const stopArgs = [\"suspend\", vmId]\n        if (callback == null) {\n          execFileSync(\"prlctl\", stopArgs)\n        }\n        else {\n          exec(\"prlctl\", stopArgs)\n            .then(callback)\n            .catch(callback)\n        }\n      })\n    }\n    await exec(\"prlctl\", [\"start\", vmId])\n  }\n\n  private ensureThatVmStarted() {\n    let startPromise = this.startPromise\n    if (startPromise == null) {\n      startPromise = this.doStartVm()\n      this.startPromise = startPromise\n    }\n    return startPromise\n  }\n\n  toVmFile(file: string): string {\n    // https://stackoverflow.com/questions/4742992/cannot-access-network-drive-in-powershell-running-as-administrator\n    return macPathToParallelsWindows(file)\n  }\n}\n\nexport function macPathToParallelsWindows(file: string) {\n  if (file.startsWith(\"C:\\\\\")) {\n    return file\n  }\n  return \"\\\\\\\\Mac\\\\Host\\\\\" + file.replace(/\\//g, \"\\\\\")\n}\n\nexport interface ParallelsVm {\n  id: string\n  name: string\n  os: \"win-10\" | \"ubuntu\" | \"elementary\"\n  state: \"running\" | \"suspended\" | \"stopped\"\n}"]}
