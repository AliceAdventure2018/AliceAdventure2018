{"version":3,"file":"winPackager.js","sourceRoot":"","sources":["../src/winPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, asArray, exec, execWine, InvalidConfigurationError, log, use } from \"builder-util\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { createHash } from \"crypto\"\nimport _debug from \"debug\"\nimport { rename } from \"fs-extra-p\"\nimport isCI from \"is-ci\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { downloadCertificate } from \"./codeSign\"\nimport { AfterPackContext } from \"./configuration\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { RequestedExecutionLevel, WindowsConfiguration } from \"./options/winOptions\"\nimport { Packager } from \"./packager\"\nimport { chooseNotNull, PlatformPackager } from \"./platformPackager\"\nimport AppXTarget from \"./targets/AppxTarget\"\nimport { NsisTarget } from \"./targets/nsis/NsisTarget\"\nimport { AppPackageHelper, CopyElevateHelper } from \"./targets/nsis/nsisUtil\"\nimport { WebInstallerTarget } from \"./targets/nsis/WebInstallerTarget\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\nimport { BuildCacheManager, digest } from \"./util/cacheManager\"\nimport { isBuildCacheEnabled } from \"./util/flags\"\nimport { time } from \"./util/timer\"\nimport { getWindowsVm, VmManager } from \"./vm/vm\"\nimport { CertificateFromStoreInfo, FileCodeSigningInfo, getCertificateFromStoreInfo, getSignVendorPath, sign, WindowsSignOptions } from \"./windowsCodeSign\"\n\nexport class WinPackager extends PlatformPackager<WindowsConfiguration> {\n  readonly cscInfo = new Lazy<FileCodeSigningInfo | CertificateFromStoreInfo | null>(() => {\n    const platformSpecificBuildOptions = this.platformSpecificBuildOptions\n    if (platformSpecificBuildOptions.certificateSubjectName != null || platformSpecificBuildOptions.certificateSha1 != null) {\n      return this.vm.value\n        .then(vm => getCertificateFromStoreInfo(platformSpecificBuildOptions, vm))\n        .catch(e => {\n          // https://github.com/electron-userland/electron-builder/pull/2397\n          if (platformSpecificBuildOptions.sign == null) {\n            throw e\n          }\n          else {\n            log.debug({error: e}, \"getCertificateFromStoreInfo error\")\n            return null\n          }\n        })\n    }\n\n    const certificateFile = platformSpecificBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.getCscPassword()\n      return Promise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n\n    const cscLink = this.getCscLink(\"WIN_CSC_LINK\")\n    if (cscLink == null) {\n      return Promise.resolve(null)\n    }\n\n    return downloadCertificate(cscLink, this.info.tempDirManager, this.projectDir)\n      .then(path => {\n        return {\n          file: path!!,\n          password: this.getCscPassword(),\n        }\n      })\n  })\n\n  private _iconPath = new Lazy(() => this.getOrConvertIcon(\"ico\"))\n\n  readonly vm = new Lazy<VmManager>(() => process.platform === \"win32\" ? Promise.resolve(new VmManager()) : getWindowsVm(this.debugLogger))\n\n  readonly computedPublisherSubjectOnWindowsOnly = new Lazy<string | null>(async () => {\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    if (\"subject\" in cscInfo) {\n      return (cscInfo as CertificateFromStoreInfo).subject\n    }\n\n    const vm = await this.vm.value\n    const info = cscInfo as FileCodeSigningInfo\n    const certFile = vm.toVmFile(info.file)\n    // https://github.com/electron-userland/electron-builder/issues/1735\n    const args = info.password ? [`(Get-PfxData \"${certFile}\" -Password (ConvertTo-SecureString -String \"${info.password}\" -Force -AsPlainText)).EndEntityCertificates.Subject`] : [`(Get-PfxCertificate \"${certFile}\").Subject`]\n    return await vm.exec(\"powershell.exe\", [\"-NoProfile\", \"-NonInteractive\", \"-Command\"].concat(args), {timeout: 30 * 1000}).then(it => it.trim())\n  })\n\n  readonly computedPublisherName = new Lazy<Array<string> | null>(async () => {\n    let publisherName = (this.platformSpecificBuildOptions as WindowsConfiguration).publisherName\n    if (publisherName === null) {\n      return null\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    if (\"subject\" in cscInfo) {\n      return asArray(parseDn((cscInfo as CertificateFromStoreInfo).subject).get(\"CN\"))\n    }\n\n    const cscFile = (cscInfo as FileCodeSigningInfo).file\n    if (publisherName == null && cscFile != null) {\n      if (process.platform === \"win32\") {\n        try {\n          const subject = await this.computedPublisherSubjectOnWindowsOnly.value\n          const commonName = subject == null ? null : parseDn(subject).get(\"CN\")\n          if (commonName) {\n            return asArray(commonName)\n          }\n        }\n        catch (e) {\n          log.warn({error: e.message}, \"cannot get publisher name using powershell\")\n        }\n      }\n\n      try {\n        publisherName = await extractCommonNameUsingOpenssl((cscInfo as FileCodeSigningInfo).password || \"\", cscFile)\n      }\n      catch (e) {\n        throw new Error(`Cannot extract publisher name from code signing certificate, please file issue. As workaround, set win.publisherName: ${e.stack || e}`)\n      }\n    }\n\n    return publisherName == null ? null : asArray(publisherName)\n  })\n\n  get isForceCodeSigningVerification(): boolean {\n    return this.platformSpecificBuildOptions.verifyUpdateCodeSignature !== false\n  }\n\n  constructor(info: Packager) {\n    super(info, Platform.WINDOWS)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"nsis\"]\n  }\n\n  protected doGetCscPassword(): string | undefined | null {\n    return chooseNotNull(chooseNotNull(this.platformSpecificBuildOptions.certificatePassword, process.env.WIN_CSC_KEY_PASSWORD), super.doGetCscPassword())\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let copyElevateHelper: CopyElevateHelper | null\n    const getCopyElevateHelper = () => {\n      if (copyElevateHelper == null) {\n        copyElevateHelper = new CopyElevateHelper()\n      }\n      return copyElevateHelper\n    }\n\n    let helper: AppPackageHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new AppPackageHelper(getCopyElevateHelper())\n      }\n      return helper\n    }\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      if (name === \"nsis\" || name === \"portable\") {\n        mapper(name, outDir => new NsisTarget(this, outDir, name, getHelper()))\n      }\n      else if (name === \"nsis-web\") {\n        // package file format differs from nsis target\n        mapper(name, outDir => new WebInstallerTarget(this, path.join(outDir, name), name, new AppPackageHelper(getCopyElevateHelper())))\n      }\n      else {\n        const targetClass: typeof NsisTarget | typeof AppXTarget | null = (() => {\n          switch (name) {\n            case \"squirrel\":\n              try {\n                return require(\"electron-builder-squirrel-windows\").default\n              }\n              catch (e) {\n                throw new InvalidConfigurationError(`Module electron-builder-squirrel-windows must be installed in addition to build Squirrel.Windows: ${e.stack || e}`)\n              }\n\n            case \"appx\":\n              return require(\"./targets/AppxTarget\").default\n\n            case \"msi\":\n              return require(\"./targets/MsiTarget\").default\n\n            default:\n              return null\n          }\n        })()\n\n        mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new (targetClass as any)(this, outDir, name))\n      }\n    }\n  }\n\n  getIconPath() {\n    return this._iconPath.value\n  }\n\n  async sign(file: string, logMessagePrefix?: string) {\n    const signOptions: WindowsSignOptions = {\n      path: file,\n      name: this.appInfo.productName,\n      site: await this.appInfo.computePackageUrl(),\n      options: this.platformSpecificBuildOptions,\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      if (this.platformSpecificBuildOptions.sign != null) {\n        await sign(signOptions, this)\n      }\n      else if (this.forceCodeSigning) {\n        throw new InvalidConfigurationError(`App is not signed and \"forceCodeSigning\" is set to true, please ensure that code signing configuration is correct, please see https://electron.build/code-signing`)\n      }\n      return\n    }\n\n    if (logMessagePrefix == null) {\n      logMessagePrefix = \"signing\"\n    }\n\n    if (\"file\" in cscInfo) {\n      log.info({\n        file: log.filePath(file),\n        certificateFile: (cscInfo as FileCodeSigningInfo).file,\n      }, logMessagePrefix)\n    }\n    else {\n      const info = cscInfo as CertificateFromStoreInfo\n      log.info({\n        file: log.filePath(file),\n        subject: info.subject,\n        thumbprint: info.thumbprint,\n        store: info.store,\n        user: info.isLocalMachineStore ? \"local machine\" : \"current user\",\n      }, logMessagePrefix)\n    }\n\n    await this.doSign({\n      ...signOptions,\n      cscInfo,\n      options: {\n        ...this.platformSpecificBuildOptions,\n      },\n    })\n  }\n\n  private async doSign(options: WindowsSignOptions) {\n    for (let i = 0; i < 3; i++) {\n      try {\n        await sign(options, this)\n        break\n      }\n      catch (e) {\n        // https://github.com/electron-userland/electron-builder/issues/1414\n        const message = e.message\n        if (message != null && message.includes(\"Couldn't resolve host name\")) {\n          log.warn({error: message, attempt: i + 1}, `cannot sign`)\n          continue\n        }\n        throw e\n      }\n    }\n  }\n\n  async signAndEditResources(file: string, arch: Arch, outDir: string, internalName?: string | null, requestedExecutionLevel?: RequestedExecutionLevel | null) {\n    const appInfo = this.appInfo\n\n    const files: Array<string> = []\n\n    const args = [\n      file,\n      \"--set-version-string\", \"FileDescription\", appInfo.productName,\n      \"--set-version-string\", \"ProductName\", appInfo.productName,\n      \"--set-version-string\", \"LegalCopyright\", appInfo.copyright,\n      \"--set-file-version\", appInfo.buildVersion,\n      \"--set-product-version\", appInfo.versionInWeirdWindowsForm,\n    ]\n\n    if (internalName != null) {\n      args.push(\n        \"--set-version-string\", \"InternalName\", internalName,\n        \"--set-version-string\", \"OriginalFilename\", \"\",\n      )\n    }\n\n    if (requestedExecutionLevel != null && requestedExecutionLevel !== \"asInvoker\") {\n      args.push(\"--set-requested-execution-level\", requestedExecutionLevel)\n    }\n\n    use(appInfo.companyName, it => args.push(\"--set-version-string\", \"CompanyName\", it!))\n    use(this.platformSpecificBuildOptions.legalTrademarks, it => args.push(\"--set-version-string\", \"LegalTrademarks\", it!))\n    const iconPath = await this.getIconPath()\n    use(iconPath, it => {\n      files.push(it)\n      args.push(\"--set-icon\", it)\n    })\n\n    const config = this.config\n    const cscInfoForCacheDigest = !isBuildCacheEnabled() || isCI || config.electronDist != null ? null : await this.cscInfo.value\n    let buildCacheManager: BuildCacheManager | null = null\n    // resources editing doesn't change executable for the same input and executed quickly - no need to complicate\n    if (cscInfoForCacheDigest != null) {\n      const cscFile = (cscInfoForCacheDigest as FileCodeSigningInfo).file\n      if (cscFile != null) {\n        files.push(cscFile)\n      }\n\n      const timer = time(\"executable cache\")\n      const hash = createHash(\"sha512\")\n      hash.update(config.electronVersion || \"no electronVersion\")\n      hash.update(config.muonVersion || \"no muonVersion\")\n      hash.update(JSON.stringify(this.platformSpecificBuildOptions))\n      hash.update(JSON.stringify(args))\n      hash.update(this.platformSpecificBuildOptions.certificateSha1 || \"no certificateSha1\")\n      hash.update(this.platformSpecificBuildOptions.certificateSubjectName || \"no subjectName\")\n\n      buildCacheManager = new BuildCacheManager(outDir, file, arch)\n      if (await buildCacheManager.copyIfValid(await digest(hash, files))) {\n        timer.end()\n        return\n      }\n      timer.end()\n    }\n\n    const timer = time(\"wine&sign\")\n    // wine supports only ia32\n    await execWine(path.join(await getSignVendorPath(), `rcedit-${process.platform === \"win32\" ? process.arch : \"ia32\"}.exe`), args)\n    await this.sign(file)\n    timer.end()\n\n    if (buildCacheManager != null) {\n      await buildCacheManager.save()\n    }\n  }\n\n  protected async postInitApp(packContext: AfterPackContext) {\n    const executable = path.join(packContext.appOutDir, `${this.appInfo.productFilename}.exe`)\n    await rename(path.join(packContext.appOutDir, `${this.electronDistExecutableName}.exe`), executable)\n  }\n\n  protected async signApp(packContext: AfterPackContext): Promise<any> {\n    const exeFileName = `${this.appInfo.productFilename}.exe`\n    if (this.platformSpecificBuildOptions.signAndEditExecutable !== false) {\n      await this.signAndEditResources(path.join(packContext.appOutDir, exeFileName), packContext.arch, packContext.outDir, path.basename(exeFileName, \".exe\"), this.platformSpecificBuildOptions.requestedExecutionLevel)\n    }\n  }\n}\n\nconst debugOpenssl = _debug(\"electron-builder:openssl\")\nasync function extractCommonNameUsingOpenssl(password: string, certPath: string): Promise<string> {\n  const result = await exec(\"openssl\", [\"pkcs12\", \"-nokeys\", \"-nodes\", \"-passin\", `pass:${password}`, \"-nomacver\", \"-clcerts\", \"-in\", certPath], {timeout: 30 * 1000}, debugOpenssl.enabled)\n  const match = result.match(/^subject.*\\/CN=([^\\/\\n]+)/m)\n  if (match == null || match[1] == null) {\n    throw new Error(`Cannot extract common name from p12: ${result}`)\n  }\n  else {\n    return match[1]\n  }\n}"]}
