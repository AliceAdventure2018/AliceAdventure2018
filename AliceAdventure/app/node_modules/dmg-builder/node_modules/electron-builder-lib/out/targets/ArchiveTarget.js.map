{"version":3,"file":"ArchiveTarget.js","sourceRoot":"","sources":["../../src/targets/ArchiveTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch } from \"builder-util\"\nimport * as path from \"path\"\nimport { Platform, Target, TargetSpecificOptions } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { archive, tar } from \"./archive\"\n\nexport class ArchiveTarget extends Target {\n  readonly options: TargetSpecificOptions = (this.packager.config as any)[this.name]\n\n  constructor(name: string, readonly outDir: string, private readonly packager: PlatformPackager<any>, private readonly isWriteUpdateInfo = false) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const format = this.name\n\n    let defaultPattern: string\n    if (packager.platform === Platform.LINUX) {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${name}-${version}\" + (arch === Arch.x64 ? \"\" : \"-${arch}\") + \".${ext}\"\n    }\n    else {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${productName}-${version}\" + (arch === Arch.x64 ? \"\" : \"-${arch}\") + \"-${os}.${ext}\"\n    }\n    const artifactPath = path.join(this.outDir, packager.expandArtifactNamePattern(this.options, format, arch, defaultPattern, false))\n    this.logBuilding(`${isMac ? \"macOS \" : \"\"}${format}`, artifactPath, arch)\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.compression, format, artifactPath, appOutDir, isMac, packager.info.tempDirManager)\n    }\n    else {\n      await archive(format, artifactPath, appOutDir, {\n        compression: packager.compression,\n        withoutDir: !isMac,\n      })\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      safeArtifactName: isMac ? packager.generateName2(format, \"mac\", true) : packager.generateName(format, arch, true, packager.platform === Platform.WINDOWS ? \"win\" : null),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: this.isWriteUpdateInfo,\n    })\n  }\n}"]}
