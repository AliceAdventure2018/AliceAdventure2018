{"version":3,"file":"AppImageTarget.js","sourceRoot":"","sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, serializeToYaml, executeAppBuilder } from \"builder-util\"\nimport { UUID } from \"builder-util-runtime\"\nimport { copyOrLinkFile, unlinkIfExists } from \"builder-util/out/fs\"\nimport * as ejs from \"ejs\"\nimport { ensureDir, outputFile, readFile, symlink, writeFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { AppImageOptions } from \"..\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst appRunTemplate = new Lazy<(data: any) => string>(async () => {\n  return ejs.compile(await readFile(path.join(getTemplatePath(\"linux\"), \"AppRun.sh\"), \"utf-8\"))\n})\n\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Lazy<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n      \"X-AppImage-BuildId\": UUID.v1(),\n    }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"AppImage\", arch, \"${name}-${version}-${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n    this.logBuilding(\"AppImage\", artifactPath, arch)\n\n    const stageDir = await createStageDir(this, packager, arch)\n    const resourceName = `appimagekit-${this.packager.executableName}`\n    const installIcons = await this.copyIcons(stageDir.dir, resourceName)\n\n    const finalDesktopFilename = `${this.packager.executableName}.desktop`\n    await Promise.all([\n      unlinkIfExists(artifactPath),\n      writeFile(stageDir.getTempFile(\"/AppRun\"), (await appRunTemplate.value)({\n        systemIntegration: this.options.systemIntegration || \"ask\",\n        desktopFileName: finalDesktopFilename,\n        executableName: this.packager.executableName,\n        resourceName,\n        installIcons,\n      }), {\n        mode: \"0755\",\n      }),\n      writeFile(stageDir.getTempFile(finalDesktopFilename), await this.desktopEntry.value),\n    ])\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\n      return\n    }\n\n    const publishConfig = await getAppUpdatePublishConfiguration(packager, arch, false /* in any case validation will be done on publish */)\n    if (publishConfig != null) {\n      await outputFile(path.join(packager.getResourcesDir(stageDir.getTempFile(\"app\")), \"app-update.yml\"), serializeToYaml(publishConfig))\n    }\n\n    const args = [\"appimage\", \"--stage\", stageDir.dir, \"--arch\", Arch[arch], \"--output\", artifactPath, \"--app\", appOutDir]\n    if (packager.compression === \"maximum\") {\n      args.push(\"--compression\", \"xz\")\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: true,\n      updateInfo: JSON.parse(await executeAppBuilder(args)),\n    })\n  }\n\n  private async copyIcons(stageDir: string, resourceName: string): Promise<string> {\n    const iconDirRelativePath = \"usr/share/icons/hicolor\"\n    const iconDir = path.join(stageDir, iconDirRelativePath)\n    await ensureDir(iconDir)\n\n    // https://github.com/AppImage/AppImageKit/issues/438#issuecomment-319094239\n    // expects icons in the /usr/share/icons/hicolor\n    const iconNames = await BluebirdPromise.map(this.helper.icons, async icon => {\n      const filename = `${this.packager.executableName}.png`\n      const iconSizeDir = `${icon.size}x${icon.size}/apps`\n      const dir = path.join(iconDir, iconSizeDir)\n      await ensureDir(dir)\n      const finalIconFile = path.join(dir, filename)\n      await copyOrLinkFile(icon.file, finalIconFile, null, true)\n\n      if (icon.file === this.helper.maxIconPath) {\n        await symlink(path.relative(stageDir, finalIconFile), path.join(stageDir, filename))\n      }\n      return {filename, iconSizeDir, size: icon.size}\n    })\n\n    let installIcons = \"\"\n    for (const icon of iconNames) {\n      installIcons += `xdg-icon-resource install --noupdate --context apps --size ${icon.size} \"$APPDIR/${iconDirRelativePath}/${icon.iconSizeDir}/${icon.filename}\" \"${resourceName}\"\\n`\n    }\n    return installIcons\n  }\n}"]}
