{"version":3,"file":"appInfo.js","sourceRoot":"","sources":["../src/appInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyOrSpaces, log, smarten } from \"builder-util\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { prerelease, SemVer } from \"semver\"\nimport { Packager } from \"./packager\"\n\nexport class AppInfo {\n  readonly description = smarten(this.info.metadata.description || \"\")\n  readonly version: string\n\n  readonly buildNumber: string | undefined\n  readonly buildVersion: string\n\n  readonly productName: string\n  readonly productFilename: string\n\n  constructor(private readonly info: Packager, buildVersion?: string | null) {\n    this.version = info.metadata.version!\n\n    if (buildVersion == null) {\n      buildVersion = info.config.buildVersion\n    }\n\n    this.buildNumber = process.env.BUILD_NUMBER || process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM || process.env.BUILD_BUILDNUMBER\n    if (buildVersion == null) {\n      buildVersion = this.version\n      if (!isEmptyOrSpaces(this.buildNumber)) {\n        buildVersion += `.${this.buildNumber}`\n      }\n    }\n    this.buildVersion = buildVersion\n\n    this.productName = info.config.productName || info.metadata.productName || info.metadata.name!\n    this.productFilename = sanitizeFileName(this.productName)\n  }\n\n  get channel(): string | null {\n    const prereleaseInfo = prerelease(this.version)\n    if (prereleaseInfo != null && prereleaseInfo.length > 0) {\n      return prereleaseInfo[0]\n    }\n    return null\n  }\n\n  get versionInWeirdWindowsForm(): string {\n    const parsedVersion = new SemVer(this.version)\n    // https://github.com/electron-userland/electron-builder/issues/2635#issuecomment-371792272\n    let buildNumber = this.buildNumber\n    if (buildNumber == null || !/^\\d+$/.test(buildNumber)) {\n      buildNumber = \"0\"\n    }\n    return `${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.patch}.${buildNumber}`\n  }\n\n  private get notNullDevMetadata() {\n    return this.info.devMetadata || {}\n  }\n\n  get companyName(): string | null {\n    const author = this.info.metadata.author || this.notNullDevMetadata.author\n    return author == null ? null : author.name\n  }\n\n  get id(): string {\n    let appId\n    if (this.info.config.appId != null) {\n      appId = this.info.config.appId\n    }\n\n    const generateDefaultAppId = () => {\n      return `com.electron.${this.info.metadata.name!.toLowerCase()}`\n    }\n\n    if (appId != null && (appId === \"your.id\" || isEmptyOrSpaces(appId))) {\n      const incorrectAppId = appId\n      appId = generateDefaultAppId()\n      log.warn(`do not use \"${incorrectAppId}\" as appId, \"${appId}\" will be used instead`)\n    }\n\n    return appId == null ? generateDefaultAppId() : appId\n  }\n\n  get name(): string {\n    return this.info.metadata.name!\n  }\n\n  get sanitizedName(): string {\n    return sanitizeFileName(this.name)\n  }\n\n  get copyright(): string {\n    const copyright = this.info.config.copyright\n    if (copyright != null) {\n      return copyright\n    }\n    return `Copyright Â© ${new Date().getFullYear()} ${this.companyName || this.productName}`\n  }\n\n  async computePackageUrl(): Promise<string | null> {\n    const url = this.info.metadata.homepage || this.notNullDevMetadata.homepage\n    if (url != null) {\n      return url\n    }\n\n    const info = await this.info.repositoryInfo\n    return info == null || info.type !== \"github\"  ? null : `https://${info.domain}/${info.user}/${info.project}`\n  }\n}\n"]}
