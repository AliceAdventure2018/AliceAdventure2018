{"version":3,"file":"packager.js","sourceRoot":"","sources":["../src/packager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { deepAssign, addValue, Arch, archFromString, AsyncTaskManager, DebugLogger, exec, InvalidConfigurationError, log, safeStringifyJson, serializeToYaml, TmpDir } from \"builder-util\"\nimport { CancellationToken } from \"builder-util-runtime\"\nimport { executeFinally, orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { EventEmitter } from \"events\"\nimport { ensureDir, outputFile } from \"fs-extra-p\"\nimport isCI from \"is-ci\"\nimport { dump } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { exists } from \"builder-util/out/fs\"\nimport { AppInfo } from \"./appInfo\"\nimport { readAsarJson } from \"./asar/asar\"\nimport { AfterPackContext, Configuration } from \"./configuration\"\nimport { Platform, SourceRepositoryInfo, Target } from \"./core\"\nimport MacPackager from \"./macPackager\"\nimport { Metadata } from \"./options/metadata\"\nimport { ArtifactCreated, PackagerOptions } from \"./packagerApi\"\nimport { PlatformPackager, resolveFunction } from \"./platformPackager\"\nimport { computeArchToTargetNamesMap, createTargets, NoOpTarget } from \"./targets/targetFactory\"\nimport { computeDefaultAppDirectory, getConfig, validateConfig } from \"./util/config\"\nimport { computeElectronVersion, getElectronVersionFromInstalled } from \"./util/electronVersion\"\nimport { Dependency, getProductionDependencies } from \"./util/packageDependencies\"\nimport { checkMetadata, readPackageJson } from \"./util/packageMetadata\"\nimport { getRepositoryInfo } from \"./util/repositoryInfo\"\nimport { getGypEnv, installOrRebuild } from \"./util/yarn\"\nimport { WinPackager } from \"./winPackager\"\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\n  emitter.on(event, handler)\n}\n\ndeclare const PACKAGE_VERSION: string\n\nexport class Packager {\n  readonly projectDir: string\n\n  private _appDir: string\n  get appDir(): string {\n    return this._appDir\n  }\n\n  private _metadata: Metadata | null = null\n  get metadata(): Metadata {\n    return this._metadata!!\n  }\n\n  private _isPrepackedAppAsar: boolean = false\n\n  get isPrepackedAppAsar(): boolean {\n    return this._isPrepackedAppAsar\n  }\n\n  private _devMetadata: Metadata | null = null\n  get devMetadata(): Metadata | null {\n    return this._devMetadata\n  }\n\n  private _configuration: Configuration | null = null\n\n  get config(): Configuration {\n    return this._configuration!!\n  }\n\n  isTwoPackageJsonProjectLayoutUsed = false\n\n  readonly eventEmitter = new EventEmitter()\n\n  _appInfo: AppInfo | null = null\n  get appInfo(): AppInfo {\n    return this._appInfo!!\n  }\n\n  readonly tempDirManager = new TmpDir(\"packager\")\n\n  private _repositoryInfo = new Lazy<SourceRepositoryInfo | null>(() => getRepositoryInfo(this.projectDir, this.metadata, this.devMetadata))\n\n  private readonly afterPackHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\n  private readonly afterSignHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\n\n  readonly options: PackagerOptions\n\n  readonly debugLogger = new DebugLogger(log.isDebugEnabled)\n\n  get repositoryInfo(): Promise<SourceRepositoryInfo | null> {\n    return this._repositoryInfo.value\n  }\n\n  private _productionDeps: Lazy<Array<Dependency>> | null = null\n\n  get productionDeps(): Lazy<Array<Dependency>> {\n    let result = this._productionDeps\n    if (result == null) {\n      // https://github.com/electron-userland/electron-builder/issues/2551\n      result = new Lazy(async () => {\n        if (this.config.beforeBuild == null || (await exists(path.join(this.appDir, \"node_modules\")))) {\n          return await getProductionDependencies(this.appDir)\n        }\n        else {\n          return []\n        }\n      })\n      this._productionDeps = result\n    }\n    return result\n  }\n\n  private _electronDownloader: any = null\n\n  electronDownloader: (options: any) => Promise<any> = options => {\n    if (this._electronDownloader == null) {\n      this._electronDownloader = BluebirdPromise.promisify(require(\"electron-download-tf\"))\n    }\n    return this._electronDownloader(options)\n  }\n\n  stageDirPathCustomizer: (target: Target, packager: PlatformPackager<any>, arch: Arch) => string = (target, packager, arch) => {\n    return path.join(target.outDir, `__${target.name}-${Arch[arch]}`)\n  }\n\n  private _buildResourcesDir: string | null = null\n\n  get buildResourcesDir(): string {\n    let result = this._buildResourcesDir\n    if (result == null) {\n      result = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n      this._buildResourcesDir = result\n    }\n    return result\n  }\n\n  get relativeBuildResourcesDirname(): string {\n    return this.config.directories!!.buildResources!!\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(options: PackagerOptions, readonly cancellationToken = new CancellationToken()) {\n    if (\"devMetadata\" in options) {\n      throw new InvalidConfigurationError(\"devMetadata in the options is deprecated, please use config instead\")\n    }\n    if (\"extraMetadata\" in options) {\n      throw new InvalidConfigurationError(\"extraMetadata in the options is deprecated, please use config.extraMetadata instead\")\n    }\n\n    const targets = options.targets || new Map<Platform, Map<Arch, Array<string>>>()\n    if (options.targets == null) {\n      options.targets = targets\n    }\n\n    function processTargets(platform: Platform, types: Array<string>) {\n      function commonArch(currentIfNotSpecified: boolean): Array<Arch> {\n        if (platform === Platform.MAC) {\n          return currentIfNotSpecified ? [Arch.x64] : []\n        }\n\n        const result = Array<Arch>()\n        return result.length === 0 && currentIfNotSpecified ? [archFromString(process.arch)] : result\n      }\n\n      let archToType = targets.get(platform)\n      if (archToType == null) {\n        archToType = new Map<Arch, Array<string>>()\n        targets.set(platform, archToType)\n      }\n\n      if (types.length === 0) {\n        for (const arch of commonArch(false)) {\n          archToType.set(arch, [])\n        }\n        return\n      }\n\n      for (const type of types) {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (const arch of commonArch(true)) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n\n    if (options.mac != null) {\n      processTargets(Platform.MAC, options.mac)\n    }\n    if (options.linux != null) {\n      processTargets(Platform.LINUX, options.linux)\n    }\n    if (options.win != null) {\n      processTargets(Platform.WINDOWS, options.win)\n    }\n\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n    this._appDir = this.projectDir\n    this.options = {\n      ...options,\n      prepackaged: options.prepackaged == null ? null : path.resolve(this.projectDir, options.prepackaged)\n    }\n\n    try {\n      log.info({version: PACKAGE_VERSION}, \"electron-builder\")\n    }\n    catch (e) {\n      // error in dev mode without babel\n      if (!(e instanceof ReferenceError)) {\n        throw e\n      }\n    }\n  }\n\n  addAfterPackHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\n    this.afterPackHandlers.push(handler)\n  }\n\n  addAfterSignHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\n    this.afterSignHandlers.push(handler)\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  dispatchArtifactCreated(event: ArtifactCreated) {\n    this.eventEmitter.emit(\"artifactCreated\", event)\n  }\n\n  async build(): Promise<BuildResult> {\n    let configPath: string | null = null\n    let configFromOptions = this.options.config\n    if (typeof configFromOptions === \"string\") {\n      // it is a path to config file\n      configPath = configFromOptions\n      configFromOptions = null\n    }\n    else if (configFromOptions != null && configFromOptions.extends != null && configFromOptions.extends.includes(\".\")) {\n      configPath = configFromOptions.extends\n    }\n\n    const projectDir = this.projectDir\n\n    const devPackageFile = path.join(projectDir, \"package.json\")\n    this._devMetadata = await orNullIfFileNotExist(readPackageJson(devPackageFile))\n\n    const devMetadata = this.devMetadata\n    const configuration = await getConfig(projectDir, configPath, configFromOptions, new Lazy(() => Promise.resolve(devMetadata)))\n    if (log.isDebugEnabled) {\n      log.debug({config: serializeToYaml(JSON.parse(safeStringifyJson(configuration)))}, \"effective config\")\n    }\n\n    this._appDir = await computeDefaultAppDirectory(projectDir, configuration.directories!!.app)\n    this.isTwoPackageJsonProjectLayoutUsed = this._appDir !== projectDir\n\n    const appPackageFile = this.isTwoPackageJsonProjectLayoutUsed ? path.join(this.appDir, \"package.json\") : devPackageFile\n\n    // tslint:disable:prefer-conditional-expression\n    if (this.devMetadata != null && !this.isTwoPackageJsonProjectLayoutUsed) {\n      this._metadata = this.devMetadata\n    }\n    else {\n      this._metadata = await this.readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile)\n    }\n    deepAssign(this.metadata, configuration.extraMetadata)\n\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      log.debug({devPackageFile, appPackageFile}, \"two package.json structure is used\")\n    }\n    checkMetadata(this.metadata, this.devMetadata, appPackageFile, devPackageFile)\n\n    return await this._build(configuration, this._metadata, this._devMetadata)\n  }\n\n  // external caller of this method always uses isTwoPackageJsonProjectLayoutUsed=false and appDir=projectDir, no way (and need) to use another values\n  async _build(configuration: Configuration, metadata: Metadata, devMetadata: Metadata | null, repositoryInfo?: SourceRepositoryInfo): Promise<BuildResult> {\n    await validateConfig(configuration, this.debugLogger)\n    this._configuration = configuration\n    this._metadata = metadata\n    this._devMetadata = devMetadata\n\n    if (repositoryInfo != null) {\n      this._repositoryInfo.value = Promise.resolve(repositoryInfo)\n    }\n\n    const projectDir = this.projectDir\n    if (configuration.electronVersion == null) {\n      // for prepacked app asar no dev deps in the app.asar\n      if (this.isPrepackedAppAsar) {\n        configuration.electronVersion = await getElectronVersionFromInstalled(projectDir)\n        if (configuration.electronVersion == null) {\n          throw new Error(`Cannot compute electron version for prepacked asar`)\n        }\n      }\n      configuration.electronVersion = await computeElectronVersion(projectDir, new Lazy(() => Promise.resolve(this.metadata)))\n    }\n    this._appInfo = new AppInfo(this)\n\n    const outDir = path.resolve(this.projectDir, configuration.directories!!.output!!)\n\n    if (!isCI && (process.stdout as any).isTTY) {\n      const effectiveConfigFile = path.join(outDir, \"electron-builder.yaml\")\n      log.info({file: log.filePath(effectiveConfigFile)}, \"writing effective config\")\n      // dump instead of safeDump to dump functions\n      await outputFile(effectiveConfigFile, dump(configuration))\n    }\n\n    return {\n      outDir,\n      platformToTargets: await executeFinally(this.doBuild(outDir), async () => {\n        if (this.debugLogger.enabled) {\n          await this.debugLogger.save(path.join(outDir, \"electron-builder-debug.yml\"))\n        }\n        await this.tempDirManager.cleanup()\n      }),\n    }\n  }\n\n  private async readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile: string): Promise<Metadata> {\n    let data = await orNullIfFileNotExist(readPackageJson(appPackageFile))\n    if (data != null) {\n      return data\n    }\n\n    data = await orNullIfFileNotExist(readAsarJson(path.join(this.projectDir, \"app.asar\"), \"package.json\"))\n    if (data != null) {\n      this._isPrepackedAppAsar = true\n      return data\n    }\n\n    throw new Error(`Cannot find package.json in the ${path.dirname(appPackageFile)}`)\n  }\n\n  private async doBuild(outDir: string): Promise<Map<Platform, Map<string, Target>>> {\n    const taskManager = new AsyncTaskManager(this.cancellationToken)\n\n    const platformToTarget = new Map<Platform, Map<string, Target>>()\n    const createdOutDirs = new Set<string>()\n\n    for (const [platform, archToType] of this.options.targets!) {\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      if (platform === Platform.MAC && process.platform === Platform.WINDOWS.nodeName) {\n        throw new InvalidConfigurationError(\"Build for macOS is supported only on macOS, please see https://electron.build/multi-platform-build\")\n      }\n\n      const packager = this.createHelper(platform)\n      const nameToTarget: Map<string, Target> = new Map()\n      platformToTarget.set(platform, nameToTarget)\n\n      for (const [arch, targetNames] of computeArchToTargetNamesMap(archToType, packager.platformSpecificBuildOptions, platform)) {\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        await this.installAppDependencies(platform, arch)\n\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        const targetList = createTargets(nameToTarget, targetNames.length === 0 ? packager.defaultTarget : targetNames, outDir, packager)\n        await createOutDirIfNeed(targetList, createdOutDirs)\n        await packager.pack(outDir, arch, targetList, taskManager)\n      }\n\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      for (const target of nameToTarget.values()) {\n        taskManager.addTask(target.finishBuild())\n      }\n    }\n\n    await taskManager.awaitTasks()\n    return platformToTarget\n  }\n\n  private createHelper(platform: Platform): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory!(this, platform)\n    }\n\n    switch (platform) {\n      case Platform.MAC:\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(`Unknown platform: ${platform}`)\n    }\n  }\n\n  private async installAppDependencies(platform: Platform, arch: Arch): Promise<any> {\n    if (this.options.prepackaged != null) {\n      return\n    }\n\n    const frameworkInfo = {version: this.config.muonVersion || this.config.electronVersion!, useCustomDist: this.config.muonVersion == null}\n    const config = this.config\n    if (config.nodeGypRebuild === true) {\n      log.info({arch: Arch[arch]}, \"executing node-gyp rebuild\")\n      await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n        env: getGypEnv(frameworkInfo, platform.nodeName, Arch[arch], true),\n      })\n    }\n\n    if (config.npmRebuild === false) {\n      log.info({reason: \"npmRebuild is set to false\"}, \"skipped app dependencies rebuild\")\n      return\n    }\n\n    const beforeBuild = resolveFunction(config.beforeBuild)\n    if (beforeBuild != null) {\n      const performDependenciesInstallOrRebuild = await beforeBuild({\n        appDir: this.appDir,\n        electronVersion: this.config.electronVersion!,\n        platform,\n        arch: Arch[arch]\n      })\n      if (!performDependenciesInstallOrRebuild) {\n        return\n      }\n    }\n\n    if (config.buildDependenciesFromSource === true && platform.nodeName !== process.platform) {\n      log.info({reason: \"platform is different and buildDependenciesFromSource is set to true\"}, \"skipped app dependencies rebuild\")\n    }\n    else {\n      await installOrRebuild(config, this.appDir, {\n        frameworkInfo,\n        platform: platform.nodeName,\n        arch: Arch[arch],\n        productionDeps: this.productionDeps,\n      })\n    }\n  }\n\n  afterPack(context: AfterPackContext): Promise<any> {\n    const afterPack = resolveFunction(this.config.afterPack)\n    const handlers = this.afterPackHandlers.slice()\n    if (afterPack != null) {\n      // user handler should be last\n      handlers.push(afterPack)\n    }\n    return BluebirdPromise.each(handlers, it => it(context))\n  }\n\n  afterSign(context: AfterPackContext): Promise<any> {\n    const afterSign = resolveFunction(this.config.afterSign)\n    const handlers = this.afterSignHandlers.slice()\n    if (afterSign != null) {\n      // user handler should be last\n      handlers.push(afterSign)\n    }\n    return BluebirdPromise.each(handlers, it => it(context))\n  }\n}\n\nfunction createOutDirIfNeed(targetList: Array<Target>, createdOutDirs: Set<string>): Promise<any> {\n  const ourDirs = new Set<string>()\n  for (const target of targetList) {\n    // noinspection SuspiciousInstanceOfGuard\n    if (target instanceof NoOpTarget) {\n      continue\n    }\n\n    const outDir = (target as Target).outDir\n    if (!createdOutDirs.has(outDir)) {\n      ourDirs.add(outDir)\n    }\n  }\n\n  if (ourDirs.size > 0) {\n    return BluebirdPromise.map(Array.from(ourDirs).sort(), it => {\n      createdOutDirs.add(it)\n      return ensureDir(it)\n    })\n  }\n  return Promise.resolve()\n}\n\nexport interface BuildResult {\n  readonly outDir: string\n  readonly platformToTargets: Map<Platform, Map<string, Target>>\n}\n"]}
