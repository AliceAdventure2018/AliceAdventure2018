"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unpackElectron = unpackElectron;
exports.unpackMuon = unpackMuon;

function _zipBin() {
  const data = require("7zip-bin");

  _zipBin = function () {
    return data;
  };

  return data;
}

function _bluebirdLst() {
  const data = _interopRequireDefault(require("bluebird-lst"));

  _bluebirdLst = function () {
    return data;
  };

  return data;
}

function _builderUtil() {
  const data = require("builder-util");

  _builderUtil = function () {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("builder-util/out/fs");

  _fs = function () {
    return data;
  };

  return data;
}

function _fsExtraP() {
  const data = require("fs-extra-p");

  _fsExtraP = function () {
    return data;
  };

  return data;
}

var path = _interopRequireWildcard(require("path"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createDownloadOpts(opts, platform, arch, electronVersion) {
  return Object.assign({
    platform,
    arch,
    version: electronVersion
  }, opts.electronDownload);
}
/** @internal */


function unpackElectron(packager, out, platform, arch, version) {
  return unpack(packager, out, platform, createDownloadOpts(packager.config, platform, arch, version));
}
/** @internal */


function unpackMuon(packager, out, platform, arch, version) {
  return unpack(packager, out, platform, Object.assign({
    mirror: "https://github.com/brave/muon/releases/download/v",
    customFilename: `brave-v${version}-${platform}-${arch}.zip`,
    verifyChecksum: false
  }, createDownloadOpts(packager.config, platform, arch, version)));
}

async function unpack(packager, out, platform, options) {
  let dist = packager.config.electronDist;

  if (dist != null) {
    const zipFile = `electron-v${options.version}-${platform}-${options.arch}.zip`;
    const resolvedDist = path.resolve(packager.projectDir, dist);

    if ((await (0, _fs().statOrNull)(path.join(resolvedDist, zipFile))) != null) {
      options.cache = resolvedDist;
      dist = null;
    }
  }

  if (dist == null) {
    const zipPath = (await _bluebirdLst().default.all([packager.info.electronDownloader(options), (0, _fsExtraP().emptyDir)(out)]))[0];

    if (process.platform === "darwin" || (0, _builderUtil().isEnvTrue)(process.env.USE_UNZIP)) {
      // on mac unzip faster than 7za (1.1 sec vs 1.6 see)
      await (0, _builderUtil().exec)("unzip", ["-oqq", "-d", out, zipPath]);
    } else {
      await (0, _builderUtil().spawn)(_zipBin().path7za, (0, _builderUtil().debug7zArgs)("x").concat(zipPath, "-aoa", `-o${out}`));

      if (platform === "linux") {
        // https://github.com/electron-userland/electron-builder/issues/786
        // fix dir permissions â€” opposite to extract-zip, 7za creates dir with no-access for other users, but dir must be readable for non-root users
        await _bluebirdLst().default.all([(0, _fsExtraP().chmod)(path.join(out, "locales"), "0755"), (0, _fsExtraP().chmod)(path.join(out, "resources"), "0755")]);
      }
    }
  } else {
    const source = packager.getElectronSrcDir(dist);
    const destination = packager.getElectronDestinationDir(out);

    _builderUtil().log.info({
      source,
      destination
    }, "copying Electron");

    await (0, _fsExtraP().emptyDir)(out);
    await (0, _fs().copyDir)(source, destination, {
      isUseHardLink: _fs().DO_NOT_USE_HARD_LINKS
    });
  }
} 
//# sourceMappingURL=dirPackager.js.map