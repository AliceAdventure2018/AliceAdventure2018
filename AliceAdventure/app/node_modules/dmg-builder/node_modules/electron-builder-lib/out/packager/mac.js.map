{"version":3,"file":"mac.js","sourceRoot":"","sources":["../../src/packager/mac.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, getPlatformIconFileName, InvalidConfigurationError, log, use } from \"builder-util\"\nimport { copyFile, copyOrLinkFile, unlinkIfExists } from \"builder-util/out/fs\"\nimport { readFile, rename, utimes, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { build as buildPlist, parse as parsePlist } from \"plist\"\nimport { AsarIntegrity } from \"../asar/integrity\"\nimport { normalizeExt, PlatformPackager } from \"../platformPackager\"\n\nfunction doRename(basePath: string, oldName: string, newName: string) {\n  return rename(path.join(basePath, oldName), path.join(basePath, newName))\n}\n\nfunction moveHelpers(frameworksPath: string, appName: string, prefix: string): Promise<any> {\n  return BluebirdPromise.map([\" Helper\", \" Helper EH\", \" Helper NP\"], suffix => {\n    const executableBasePath = path.join(frameworksPath, `${prefix}${suffix}.app`, \"Contents\", \"MacOS\")\n    return doRename(executableBasePath, `${prefix}${suffix}`, appName + suffix)\n      .then(() => doRename(frameworksPath, `${prefix}${suffix}.app`, `${appName}${suffix}.app`))\n  })\n}\n\n/** @internal */\nexport function filterCFBundleIdentifier(identifier: string) {\n  // Remove special characters and allow only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.)\n  // Apple documentation: https://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070\n  return identifier.replace(/ /g, \"-\").replace(/[^a-zA-Z0-9.-]/g, \"\")\n}\n\n/** @internal */\nexport async function createMacApp(packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null) {\n  const appInfo = packager.appInfo\n  const appFilename = appInfo.productFilename\n\n  const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"Contents\")\n  const frameworksPath = path.join(contentsPath, \"Frameworks\")\n\n  const appPlistFilename = path.join(contentsPath, \"Info.plist\")\n  const helperPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper.app`, \"Contents\", \"Info.plist\")\n  const helperEHPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper EH.app`, \"Contents\", \"Info.plist\")\n  const helperNPPlistFilename = path.join(frameworksPath, `${packager.electronDistMacOsExecutableName} Helper NP.app`, \"Contents\", \"Info.plist\")\n\n  const buildMetadata = packager.config!\n  const fileContents: Array<string> = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, (buildMetadata as any)[\"extend-info\"]], it => it == null ? it : readFile(it, \"utf8\"))\n  const appPlist = parsePlist(fileContents[0])\n  const helperPlist = parsePlist(fileContents[1])\n  const helperEHPlist = parsePlist(fileContents[2])\n  const helperNPPlist = parsePlist(fileContents[3])\n\n  // if an extend-info file was supplied, copy its contents in first\n  if (fileContents[4] != null) {\n    Object.assign(appPlist, parsePlist(fileContents[4]))\n  }\n\n  const macOptions = buildMetadata.mac || {}\n  if (macOptions.extendInfo != null) {\n    Object.assign(appPlist, macOptions.extendInfo)\n  }\n\n  const appBundleIdentifier = filterCFBundleIdentifier(appInfo.id)\n\n  const oldHelperBundleId = (buildMetadata as any)[\"helper-bundle-id\"]\n  if (oldHelperBundleId != null) {\n    log.warn(\"build.helper-bundle-id is deprecated, please set as build.mac.helperBundleId\")\n  }\n  const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `${appBundleIdentifier}.helper`)\n\n  const icon = await packager.getIconPath()\n  const oldIcon = appPlist.CFBundleIconFile\n  if (icon != null) {\n    appPlist.CFBundleIconFile = `${appFilename}.icns`\n  }\n\n  appPlist.CFBundleDisplayName = appInfo.productName\n  appPlist.CFBundleIdentifier = appBundleIdentifier\n  appPlist.CFBundleName = appInfo.productName\n\n  // https://github.com/electron-userland/electron-builder/issues/1278\n  appPlist.CFBundleExecutable = !appFilename.endsWith(\" Helper\") ? appFilename : appFilename.substring(0, appFilename.length - \" Helper\".length)\n\n  helperPlist.CFBundleExecutable = `${appFilename} Helper`\n  helperEHPlist.CFBundleExecutable = `${appFilename} Helper EH`\n  helperNPPlist.CFBundleExecutable = `${appFilename} Helper NP`\n\n  helperPlist.CFBundleDisplayName = `${appInfo.productName} Helper`\n  helperEHPlist.CFBundleDisplayName = `${appInfo.productName} Helper EH`\n  helperNPPlist.CFBundleDisplayName = `${appInfo.productName} Helper NP`\n\n  helperPlist.CFBundleIdentifier = helperBundleIdentifier\n  helperEHPlist.CFBundleIdentifier = `${helperBundleIdentifier}.EH`\n  helperNPPlist.CFBundleIdentifier = `${helperBundleIdentifier}.NP`\n\n  appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version\n  appPlist.CFBundleVersion = appInfo.buildVersion\n\n  if (macOptions.minimumSystemVersion != null) {\n    appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion\n  }\n\n  const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols))\n  if (protocols.length > 0) {\n    appPlist.CFBundleURLTypes = protocols.map(protocol => {\n      const schemes = asArray(protocol.schemes)\n      if (schemes.length === 0) {\n        throw new InvalidConfigurationError(`Protocol \"${protocol.name}\": must be at least one scheme specified`)\n      }\n      return {\n        CFBundleURLName: protocol.name,\n        CFBundleTypeRole: protocol.role || \"Editor\",\n        CFBundleURLSchemes: schemes.slice()\n      }\n    })\n  }\n\n  const resourcesPath = path.join(contentsPath, \"Resources\")\n\n  const fileAssociations = packager.fileAssociations\n  if (fileAssociations.length > 0) {\n    appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async fileAssociation => {\n      const extensions = asArray(fileAssociation.ext).map(normalizeExt)\n      const customIcon = await packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `${extensions[0]}.icns`)\n      let iconFile = appPlist.CFBundleIconFile\n      if (customIcon != null) {\n        iconFile = path.basename(customIcon)\n        await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile))\n      }\n\n      const result = {\n        CFBundleTypeExtensions: extensions,\n        CFBundleTypeName: fileAssociation.name || extensions[0],\n        CFBundleTypeRole: fileAssociation.role || \"Editor\",\n        CFBundleTypeIconFile: iconFile\n      } as any\n\n      if (fileAssociation.isPackage) {\n        result.LSTypeIsPackage = true\n      }\n      return result\n    })\n  }\n\n  use(packager.platformSpecificBuildOptions.category || (buildMetadata as any).category, it => appPlist.LSApplicationCategoryType = it)\n  appPlist.NSHumanReadableCopyright = appInfo.copyright\n\n  if (asarIntegrity != null) {\n    appPlist.AsarIntegrity = JSON.stringify(asarIntegrity)\n  }\n\n  const promises: Array<Promise<any | null | undefined>> = [\n    writeFile(appPlistFilename, buildPlist(appPlist)),\n    writeFile(helperPlistFilename, buildPlist(helperPlist)),\n    writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),\n    writeFile(helperNPPlistFilename, buildPlist(helperNPPlist)),\n    doRename(path.join(contentsPath, \"MacOS\"), packager.electronDistMacOsExecutableName, appPlist.CFBundleExecutable),\n    unlinkIfExists(path.join(appOutDir, \"LICENSE\")),\n    unlinkIfExists(path.join(appOutDir, \"LICENSES.chromium.html\")),\n  ]\n\n  if (icon != null) {\n    promises.push(unlinkIfExists(path.join(resourcesPath, oldIcon)))\n    promises.push(copyFile(icon, path.join(resourcesPath, appPlist.CFBundleIconFile)))\n  }\n\n  await BluebirdPromise.all(promises)\n\n  await moveHelpers(frameworksPath, appFilename, packager.electronDistMacOsExecutableName)\n  const appPath = path.join(appOutDir, `${appFilename}.app`)\n  await rename(path.dirname(contentsPath), appPath)\n  // https://github.com/electron-userland/electron-builder/issues/840\n  const now = Date.now() / 1000\n  await utimes(appPath, now, now)\n}"]}
