{"version":3,"file":"PublishManager.js","sourceRoot":"","sources":["../../src/publish/PublishManager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, AsyncTaskManager, InvalidConfigurationError, isEmptyOrSpaces, isPullRequest, log, safeStringifyJson, serializeToYaml } from \"builder-util\"\nimport { BintrayOptions, CancellationToken, GenericServerOptions, getS3LikeProviderBaseUrl, GithubOptions, githubUrl, PublishConfiguration, PublishProvider } from \"builder-util-runtime\"\nimport _debug from \"debug\"\nimport { getCiTag, PublishContext, Publisher, PublishOptions } from \"electron-publish\"\nimport { BintrayPublisher } from \"electron-publish/out/BintrayPublisher\"\nimport { GitHubPublisher } from \"electron-publish/out/gitHubPublisher\"\nimport { MultiProgress } from \"electron-publish/out/multiProgress\"\nimport { writeFile } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport * as path from \"path\"\nimport { WriteStream as TtyWriteStream } from \"tty\"\nimport * as url from \"url\"\nimport { ArtifactCreated, Platform, PlatformSpecificBuildOptions, Target } from \"../index\"\nimport { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { WinPackager } from \"../winPackager\"\nimport { createUpdateInfoTasks, UpdateInfoFileTask, writeUpdateInfoFiles } from \"./updateInfoBuilder\"\n\nconst publishForPrWarning = \"There are serious security concerns with PUBLISH_FOR_PULL_REQUEST=true (see the  CircleCI documentation (https://circleci.com/docs/1.0/fork-pr-builds/) for details)\" +\n  \"\\nIf you have SSH keys, sensitive env vars or AWS credentials stored in your project settings and untrusted forks can make pull requests against your repo, then this option isn't for you.\"\n\nconst debug = _debug(\"electron-builder:publish\")\n\nexport class PublishManager implements PublishContext {\n  private readonly nameToPublisher = new Map<string, Publisher | null>()\n\n  private readonly taskManager: AsyncTaskManager\n\n  private readonly isPublish: boolean = false\n\n  readonly progress = (process.stdout as TtyWriteStream).isTTY ? new MultiProgress() : null\n\n  private readonly updateFileWriteTask: Array<UpdateInfoFileTask> = []\n\n  constructor(private readonly packager: Packager, private readonly publishOptions: PublishOptions, readonly cancellationToken: CancellationToken = packager.cancellationToken) {\n    this.taskManager = new AsyncTaskManager(cancellationToken)\n\n    const forcePublishForPr = process.env.PUBLISH_FOR_PULL_REQUEST === \"true\"\n    if (!isPullRequest() || forcePublishForPr) {\n      if (publishOptions.publish === undefined) {\n        if (process.env.npm_lifecycle_event === \"release\") {\n          publishOptions.publish = \"always\"\n        }\n        else {\n          const tag = getCiTag()\n          if (tag != null) {\n            log.info({reason: \"tag is defined\", tag}, \"artifacts will be published\")\n            publishOptions.publish = \"onTag\"\n          }\n          else if (isCi) {\n            log.info({reason: \"CI detected\"}, \"artifacts will be published if draft release exists\")\n            publishOptions.publish = \"onTagOrDraft\"\n          }\n        }\n      }\n\n      const publishPolicy = publishOptions.publish\n      this.isPublish = publishPolicy != null && publishOptions.publish !== \"never\" && (publishPolicy !== \"onTag\" || getCiTag() != null)\n      if (this.isPublish && forcePublishForPr) {\n        log.warn(publishForPrWarning)\n      }\n    }\n    else if (publishOptions.publish !== \"never\") {\n      log.info({\n        reason: \"current build is a part of pull request\",\n        solution: `set env PUBLISH_FOR_PULL_REQUEST to true to force code signing\\n${publishForPrWarning}`,\n      }, \"publishing will be skipped\")\n    }\n\n    packager.addAfterPackHandler(async event => {\n      const packager = event.packager\n      if (event.electronPlatformName === \"darwin\") {\n        if (!event.targets.some(it => it.name === \"dmg\" || it.name === \"zip\")) {\n          return\n        }\n      }\n      else if (packager.platform === Platform.WINDOWS) {\n        if (!event.targets.some(it => isSuitableWindowsTarget(it))) {\n          return\n        }\n      }\n      else {\n        return\n      }\n\n      const publishConfig = await getAppUpdatePublishConfiguration(packager, event.arch, this.isPublish)\n      if (publishConfig != null) {\n        await writeFile(path.join(packager.getResourcesDir(event.appOutDir), \"app-update.yml\"), serializeToYaml(publishConfig))\n      }\n    })\n\n    packager.artifactCreated(event => {\n      const publishConfiguration = event.publishConfig\n      if (publishConfiguration == null) {\n        this.taskManager.addTask(this.artifactCreated(event))\n      }\n      else if (this.isPublish) {\n        if (debug.enabled) {\n          debug(`artifactCreated (isPublish: ${this.isPublish}): ${safeStringifyJson(event, new Set([\"packager\"]))},\\n  publishConfig: ${safeStringifyJson(publishConfiguration)}`)\n        }\n        this.scheduleUpload(publishConfiguration, event)\n      }\n    })\n  }\n\n  private scheduleUpload(publishConfig: PublishConfiguration, event: ArtifactCreated): void {\n    if (publishConfig.provider === \"generic\") {\n      return\n    }\n\n    const publisher = this.getOrCreatePublisher(publishConfig, event.packager)\n    if (publisher == null) {\n      log.debug({\n        file: event.file,\n        reason: \"publisher is null\",\n        publishConfig: safeStringifyJson(publishConfig),\n      }, \"not published\")\n      return\n    }\n\n    this.taskManager.addTask(publisher.upload(event))\n  }\n\n  private async artifactCreated(event: ArtifactCreated) {\n    const packager = event.packager\n    const target = event.target\n    const publishConfigs = event.publishConfig == null ? await getPublishConfigs(packager, target == null ? null : target.options, event.arch, this.isPublish) : [event.publishConfig]\n\n    if (debug.enabled) {\n      debug(`artifactCreated (isPublish: ${this.isPublish}): ${safeStringifyJson(event, new Set([\"packager\"]))},\\n  publishConfigs: ${safeStringifyJson(publishConfigs)}`)\n    }\n\n    const eventFile = event.file\n    if (publishConfigs == null) {\n      if (this.isPublish) {\n        log.debug({file: eventFile, reason: \"no publish configs\"}, \"not published\")\n      }\n      return\n    }\n\n    if (this.isPublish) {\n      for (const publishConfig of publishConfigs) {\n        if (this.cancellationToken.cancelled) {\n          log.debug({file: event.file, reason: \"cancelled\"}, \"not published\")\n          break\n        }\n\n        this.scheduleUpload(publishConfig, event)\n      }\n    }\n\n    if (event.isWriteUpdateInfo && target != null && eventFile != null &&\n      !this.cancellationToken.cancelled &&\n      (packager.platform !== Platform.WINDOWS || isSuitableWindowsTarget(target))) {\n      this.taskManager.addTask(createUpdateInfoTasks(event, publishConfigs).then(it => this.updateFileWriteTask.push(...it)))\n    }\n  }\n\n  private getOrCreatePublisher(publishConfig: PublishConfiguration, platformPackager: PlatformPackager<any>): Publisher | null {\n    // to not include token into cache key\n    const providerCacheKey = safeStringifyJson(publishConfig)\n    let publisher = this.nameToPublisher.get(providerCacheKey)\n    if (publisher == null) {\n      publisher = createPublisher(this, platformPackager.info.metadata.version!, publishConfig, this.publishOptions)\n      this.nameToPublisher.set(providerCacheKey, publisher)\n      log.info({publisher: publisher!!.toString()}, \"publishing\")\n    }\n    return publisher\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  cancelTasks() {\n    this.taskManager.cancelTasks()\n    this.nameToPublisher.clear()\n  }\n\n  async awaitTasks(): Promise<void> {\n    await this.taskManager.awaitTasks()\n\n    const updateInfoFileTasks = this.updateFileWriteTask\n    if (this.cancellationToken.cancelled || updateInfoFileTasks.length === 0) {\n      return\n    }\n\n    await writeUpdateInfoFiles(updateInfoFileTasks, this.packager)\n    await this.taskManager.awaitTasks()\n  }\n}\n\nexport async function getAppUpdatePublishConfiguration(packager: PlatformPackager<any>, arch: Arch, errorIfCannot: boolean) {\n  const publishConfigs = await getPublishConfigsForUpdateInfo(packager, await getPublishConfigs(packager, null, arch, errorIfCannot), arch)\n  if (publishConfigs == null || publishConfigs.length === 0) {\n    return null\n  }\n\n  let publishConfig = publishConfigs[0]\n\n  if (packager.platform === Platform.WINDOWS && publishConfig.publisherName == null) {\n    const winPackager = packager as WinPackager\n    if (winPackager.isForceCodeSigningVerification) {\n      const publisherName = await winPackager.computedPublisherName.value\n      if (publisherName != null) {\n        publishConfig = {...publishConfig, publisherName}\n      }\n    }\n  }\n  return publishConfig\n}\n\nexport async function getPublishConfigsForUpdateInfo(packager: PlatformPackager<any>, publishConfigs: Array<PublishConfiguration> | null, arch: Arch | null): Promise<Array<PublishConfiguration> | null> {\n  if (publishConfigs === null) {\n    return null\n  }\n\n  if (publishConfigs.length === 0) {\n    log.debug(null, \"getPublishConfigsForUpdateInfo: no publishConfigs, detect using repository info\")\n    // https://github.com/electron-userland/electron-builder/issues/925#issuecomment-261732378\n    // default publish config is github, file should be generated regardless of publish state (user can test installer locally or manage the release process manually)\n    const repositoryInfo = await packager.info.repositoryInfo\n    debug(`getPublishConfigsForUpdateInfo: ${safeStringifyJson(repositoryInfo)}`)\n    if (repositoryInfo != null && repositoryInfo.type === \"github\") {\n      const resolvedPublishConfig = await getResolvedPublishConfig(packager, {provider: repositoryInfo.type}, arch, false)\n      if (resolvedPublishConfig != null) {\n        debug(`getPublishConfigsForUpdateInfo: resolve to publish config ${safeStringifyJson(resolvedPublishConfig)}`)\n        return [resolvedPublishConfig]\n      }\n    }\n  }\n  return publishConfigs\n}\n\nexport function createPublisher(context: PublishContext, version: string, publishConfig: PublishConfiguration, options: PublishOptions): Publisher | null {\n  if (debug.enabled) {\n    debug(`Create publisher: ${safeStringifyJson(publishConfig)}`)\n  }\n\n  const provider = publishConfig.provider\n  switch (provider) {\n    case \"github\":\n      return new GitHubPublisher(context, publishConfig as GithubOptions, version, options)\n\n    case \"bintray\":\n      return new BintrayPublisher(context, publishConfig as BintrayOptions, version, options)\n\n    case \"generic\":\n      return null\n\n    default:\n      const clazz = requireProviderClass(provider)\n      return clazz == null ? null : new clazz(context, publishConfig)\n  }\n}\n\nfunction requireProviderClass(provider: string): any | null {\n  switch (provider) {\n    case \"github\":\n      return GitHubPublisher\n\n    case \"bintray\":\n      return BintrayPublisher\n\n    case \"generic\":\n      return null\n\n    case \"spaces\":\n      return require(`electron-publisher-s3/out/${provider}Publisher`).default\n\n    default:\n      return require(`electron-publisher-${provider}`).default\n  }\n}\n\nexport function computeDownloadUrl(publishConfiguration: PublishConfiguration, fileName: string | null, packager: PlatformPackager<any>) {\n  if (publishConfiguration.provider === \"generic\") {\n    const baseUrlString = (publishConfiguration as GenericServerOptions).url\n    if (fileName == null) {\n      return baseUrlString\n    }\n\n    const baseUrl = url.parse(baseUrlString)\n    return url.format({...baseUrl as url.UrlObject, pathname: path.posix.resolve(baseUrl.pathname || \"/\", encodeURI(fileName))})\n  }\n\n  let baseUrl\n  if (publishConfiguration.provider === \"github\") {\n    const gh = publishConfiguration as GithubOptions\n    baseUrl = `${githubUrl(gh)}/${gh.owner}/${gh.repo}/releases/download/${gh.vPrefixedTagName === false ? \"\" : \"v\"}${packager.appInfo.version}`\n  }\n  else {\n    baseUrl = getS3LikeProviderBaseUrl(publishConfiguration)\n  }\n\n  if (fileName == null) {\n    return baseUrl\n  }\n  return `${baseUrl}/${encodeURI(fileName)}`\n}\n\nexport async function getPublishConfigs(packager: PlatformPackager<any>, targetSpecificOptions: PlatformSpecificBuildOptions | null | undefined, arch: Arch | null, errorIfCannot: boolean): Promise<Array<PublishConfiguration> | null> {\n  let publishers\n\n  // check build.nsis (target)\n  if (targetSpecificOptions != null) {\n    publishers = targetSpecificOptions.publish\n    // if explicitly set to null - do not publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  // check build.win (platform)\n  if (publishers == null) {\n    publishers = packager.platformSpecificBuildOptions.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    publishers = packager.config.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    let serviceName: PublishProvider | null = null\n    if (!isEmptyOrSpaces(process.env.GH_TOKEN) || !isEmptyOrSpaces(process.env.GITHUB_TOKEN)) {\n      serviceName = \"github\"\n    }\n    else if (!isEmptyOrSpaces(process.env.BT_TOKEN)) {\n      serviceName = \"bintray\"\n    }\n\n    if (serviceName != null) {\n      log.debug(null, `Detect ${serviceName} as publish provider`)\n      return [(await getResolvedPublishConfig(packager, {provider: serviceName}, arch, errorIfCannot))!]\n    }\n  }\n\n  if (publishers == null) {\n    return []\n  }\n\n  debug(`Explicit publish provider: ${safeStringifyJson(publishers)}`)\n  return await (BluebirdPromise.map(asArray(publishers), it => getResolvedPublishConfig(packager, typeof it === \"string\" ? {provider: it} : it, arch, errorIfCannot)) as Promise<Array<PublishConfiguration>>)\n}\n\nfunction isSuitableWindowsTarget(target: Target) {\n  if (target.name === \"appx\" && target.options != null && (target.options as any).electronUpdaterAware) {\n    return true\n  }\n  return target.name === \"nsis\" || target.name.startsWith(\"nsis-\")\n}\n\nfunction expandPublishConfig(options: any, packager: PlatformPackager<any>, arch: Arch | null): void {\n  for (const name of Object.keys(options)) {\n    const value = options[name]\n    if (typeof value === \"string\") {\n      const expanded = packager.expandMacro(value, arch == null ? null : Arch[arch])\n      if (expanded !== value) {\n        options[name] = expanded\n      }\n    }\n  }\n}\n\nfunction isDetectUpdateChannel(packager: PlatformPackager<any>) {\n  const value = packager.platformSpecificBuildOptions.detectUpdateChannel\n  return value == null ? packager.config.detectUpdateChannel !== false : value\n}\n\nasync function getResolvedPublishConfig(packager: PlatformPackager<any>, options: PublishConfiguration, arch: Arch | null, errorIfCannot: boolean): Promise<PublishConfiguration | GithubOptions | BintrayOptions | null> {\n  options = {...options}\n  expandPublishConfig(options, packager, arch)\n\n  let channelFromAppVersion: string | null = null\n  if ((options as GenericServerOptions).channel == null && isDetectUpdateChannel(packager)) {\n    channelFromAppVersion = packager.appInfo.channel\n  }\n\n  const provider = options.provider\n  if (provider === \"generic\") {\n    const o = options as GenericServerOptions\n    if (o.url == null) {\n      throw new InvalidConfigurationError(`Please specify \"url\" for \"generic\" update server`)\n    }\n\n    if (channelFromAppVersion != null) {\n      (o as any).channel = channelFromAppVersion\n    }\n    return options\n  }\n\n  const providerClass = requireProviderClass(options.provider)\n  if (providerClass != null && providerClass.checkAndResolveOptions != null) {\n    await providerClass.checkAndResolveOptions(options, channelFromAppVersion, errorIfCannot)\n    return options\n  }\n\n  const isGithub = provider === \"github\"\n  if (!isGithub && provider !== \"bintray\") {\n    return options\n  }\n\n  let owner = isGithub ? (options as GithubOptions).owner : (options as BintrayOptions).owner\n  let project = isGithub ? (options as GithubOptions).repo : (options as BintrayOptions).package\n\n  if (isGithub && owner == null && project != null) {\n    const index = project.indexOf(\"/\")\n    if (index > 0) {\n      const repo = project\n      project = repo.substring(0, index)\n      owner = repo.substring(index + 1)\n    }\n  }\n\n  async function getInfo() {\n    const info = await packager.info.repositoryInfo\n    if (info != null) {\n      return info\n    }\n\n    const message = `Cannot detect repository by .git/config. Please specify \"repository\" in the package.json (https://docs.npmjs.com/files/package.json#repository).\\nPlease see https://electron.build/configuration/publish`\n    if (errorIfCannot) {\n      throw new Error(message)\n    }\n    else {\n      log.warn(message)\n      return null\n    }\n  }\n\n  if (!owner || !project) {\n    log.debug({reason: \"owner or project is not specified explicitly\", provider, owner, project}, \"calling getInfo\")\n    const info = await getInfo()\n    if (info == null) {\n      return null\n    }\n\n    if (!owner) {\n      owner = info.user\n    }\n    if (!project) {\n      project = info.project\n    }\n  }\n\n  if (isGithub) {\n    if ((options as GithubOptions).token != null && !(options as GithubOptions).private) {\n      log.warn('\"token\" specified in the github publish options. It should be used only for [setFeedURL](module:electron-updater/out/AppUpdater.AppUpdater+setFeedURL).')\n    }\n    //tslint:disable-next-line:no-object-literal-type-assertion\n    return {owner, repo: project, ...options} as GithubOptions\n  }\n  else {\n    //tslint:disable-next-line:no-object-literal-type-assertion\n    return {owner, package: project, ...options} as BintrayOptions\n  }\n}"]}
