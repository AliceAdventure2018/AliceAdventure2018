{"version":3,"file":"asar.js","sourceRoot":"","sources":["../../src/asar/asar.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAoB;;;;;;;;;;AACrD,AAAO,AAAE,AAAK,AAAE,AAAI,AAAE,AAAI,AAAE,AAAQ,AAAS,AAAM,AAAY;;;;;;;;;;AAC/D,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAgB,AAChB,AAAM;WAaL;AAED,AAAgB,AAChB,AAAM;;;;;;AAGJ,cAAqB,AAAW,KAAW,SAAS,IAAI,AAAI,AAAE,QAAW,aAAqB,CAAC,AAAC;AAA3E,SAAG,MAAH,AAAG,AAAQ;AAAW,SAAM,SAAN,AAAM,AAAa;AAAW,SAAU,aAAV,AAAU,AAAa;AAFxF,SAAM,SAAG,AAAC;;AAGhB,AAAE,AAAC,QAAC,AAAI,KAAC,AAAM,OAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,AAAI,WAAC,AAAM,OAAC,AAAK,QAAG,AAAE,AACxB;AAAC,AACH;AAAC;;AAED,AAAuB,0BAAC,AAAS,GAAE,AAAiB;AAClD,QAAI,AAAI,OAAG,AAAI,KAAC,AAAM;;AACtB,AAAG,AAAC,SAAC,MAAM,AAAG,OAAI,AAAC,EAAC,AAAK,MAAC,AAAI,KAAC,AAAG,AAAC,AAAC,MAAC,AAAC;AACpC,AAAE,AAAC,UAAC,AAAG,QAAK,AAAG,AAAC,KAAC,AAAC;AAChB,YAAI,AAAK,QAAG,AAAI,KAAC,AAAM,MAAC,AAAG,AAAC;;AAC5B,AAAE,AAAC,YAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAE,AAAC,cAAC,CAAC,AAAQ,AAAC,UAAC,AAAC;AACd,AAAM,mBAAC,AAAI,AACb;AAAC;;AACD,AAAK,kBAAG,IAAI,AAAI,AAAE;AAClB,AAAK,gBAAC,AAAK,QAAG,AAAE;AAChB,AAAI,eAAC,AAAM,MAAC,AAAG,AAAC,OAAG,AAAK,AAC1B;AAAC;;AACD,AAAI,eAAG,AAAK,AACd;AAAC,AACH;AAAC;;AACD,AAAM,WAAC,AAAI,AACb;AAAC;;AAED,AAAe,kBAAC,AAAS;AACvB,AAAE,AAAC,QAAC,AAAC,KAAI,AAAI,QAAI,AAAC,EAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAChC,AAAM,aAAC,AAAI,KAAC,AAAM,AACpB;AAAC;;AAED,UAAM,AAAI,OAAG,AAAI,KAAC,AAAQ,SAAC,AAAC,AAAC;AAC7B,UAAM,AAAO,UAAG,AAAI,KAAC,AAAuB,wBAAC,AAAI,KAAC,AAAO,QAAC,AAAC,AAAC,IAAE,AAAI,AAAE;;AACpE,AAAE,AAAC,QAAC,AAAO,QAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,AAAO,cAAC,AAAK,QAAG,AAAE,AACpB;AAAC;;AAED,QAAI,AAAM,SAAG,AAAO,QAAC,AAAK,MAAC,AAAI,AAAC;;AAChC,AAAE,AAAC,QAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,eAAG,IAAI,AAAI,AAAE;AACnB,AAAO,cAAC,AAAK,MAAC,AAAI,AAAC,QAAG,AAAM,AAC9B;AAAC;;AACD,AAAM,WAAC,AAAM,AACf;AAAC;;AAED,AAAW,cAAC,AAAY,MAAE,AAAa,SAAE,AAAY,MAAE,AAAiB,UAAE,AAAW;AACnF,AAAE,AAAC,QAAC,AAAI,OAAG,AAAU,AAAC,YAAC,AAAC;AACtB,YAAM,IAAI,AAAK,AAAC,SAAG,AAAI,IAAyC,AAAC,AACnE;AAAC;;AAED,UAAM,AAAI,OAAG,IAAI,AAAI,AAAE;AACvB,AAAI,SAAC,AAAI,OAAG,AAAI;;AAChB,AAAE,AAAC,QAAC,AAAQ,AAAC,UAAC,AAAC;AACb,AAAI,WAAC,AAAQ,WAAG,AAAI,AACtB;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAA0B;AAC1B,AAAI,WAAC,AAAM,SAAG,AAAI,KAAC,AAAM,OAAC,AAAQ,AAAE;;AACpC,AAAE,AAAC,UAAC,AAAO,QAAC,AAAQ,aAAK,AAAO,AAAI,WAAC,AAAI,KAAC,AAAI,OAAG,AAAK,AAAC,AAAC,OAAC,AAAC;AACxD,AAAI,aAAC,AAAU,aAAG,AAAI,AACxB;AAAC;;AACD,AAAI,WAAC,AAAM,UAAI,AAAI,KAAC,AAAI,AAC1B;AAAC;;AAED,QAAI,AAAQ,WAAG,AAAO,QAAC,AAAK;;AAC5B,AAAE,AAAC,QAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAQ,iBAAG,AAAE;AACb,AAAO,cAAC,AAAK,QAAG,AAAQ,AAC1B;AAAC;;AACD,AAAQ,aAAC,AAAI,KAAC,AAAQ,SAAC,AAAI,AAAC,AAAC,SAAG,AAAI;AAEpC,AAAM,WAAC,AAAI,AACb;AAAC;;AAED,AAAO,UAAC,AAAS;AACf,UAAM,AAAI,OAAG,AAAI,KAAC,AAAuB,wBAAC,AAAI,KAAC,AAAO,QAAC,AAAC,AAAC,IAAE,AAAK,AAAE;AAClE,AAAM,WAAC,AAAI,KAAC,AAAM,MAAC,AAAI,KAAC,AAAQ,SAAC,AAAC,AAAC,AAAC,AACtC;AAAC;;AAED,AAAO,UAAC,AAAS,GAAE,cAAuB,AAAI;AAC5C,UAAM,AAAI,OAAG,AAAI,KAAC,AAAO,QAAC,AAAC,AAAE,IAC7B,AAAoD;;AACpD,AAAM,WAAC,AAAW,eAAI,AAAI,KAAC,AAAI,QAAI,AAAI,AAAC,AAAC,OAAC,AAAI,KAAC,AAAO,QAAC,AAAI,KAAC,AAAI,AAAC,AAAC,AAAC,QAAC,AAAI,AAC1E;AAAC;;AAED,AAAK,QAAC,AAAQ,SAAC,AAAY;AACzB,AAAM,WAAC,AAAI,KAAC,AAAK,MAAC,CAAC,MAAM,AAAI,KAAC,AAAQ,SAAC,AAAI,AAAC,AAAC,OAAC,AAAQ,AAAE,AAAC,AAC3D;AAAC;;AAED,AAAK,QAAC,AAAQ,SAAC,AAAY;AACzB,AAAM,WAAC,MAAM,AAAgB,iBAAC,AAAI,MAAE,AAAI,MAAE,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC,AAAC,AAC/D;AAAC,AACF,AAED,AAAM;;;;;;AAAC,AAAK,wBAAmB,AAAe;AAC5C,QAAM,AAAE,KAAG,MAAM,AAAI,sBAAC,AAAO,SAAE,AAAG,AAAC;AACnC,MAAI,AAAI;AACR,MAAI,AAAS;;AACb,MAAI,AAAC;AACH,UAAM,AAAO,UAAG,AAAM,OAAC,AAAW,YAAC,AAAC,AAAC;;AACrC,AAAE,AAAC,QAAC,OAAM,AAAI,sBAAC,AAAE,IAAE,AAAO,SAAE,AAAC,GAAE,AAAC,GAAE,AAAW,AAAC,WAAK,AAAC,AAAC,GAAC,AAAC;AACrD,YAAM,IAAI,AAAK,MAAC,AAA4B,AAAC,AAC/C;AAAC;;AAED,UAAM,AAAU,aAAG,AAAgB,0CAAC,AAAO,AAAC;AAC5C,AAAI,WAAG,AAAU,WAAC,AAAc,AAAE,iBAAC,AAAU,AAAE;AAC/C,AAAS,gBAAG,AAAM,OAAC,AAAW,YAAC,AAAI,AAAC;;AACpC,AAAE,AAAC,QAAC,OAAM,AAAI,sBAAC,AAAE,IAAE,AAAS,WAAE,AAAC,GAAE,AAAI,MAAE,AAAW,AAAC,WAAK,AAAI,AAAC,MAAC,AAAC;AAC7D,YAAM,IAAI,AAAK,MAAC,AAAuB,AAAC,AAC1C;AAAC,AACH;AAAC,YACO,AAAC;AACP,UAAM,AAAK,uBAAC,AAAE,AAAC,AACjB;AAAC;;AAED,QAAM,AAAY,eAAG,AAAgB,0CAAC,AAAU,AAAC;AACjD,QAAM,AAAM,SAAG,AAAY,aAAC,AAAc,AAAE,iBAAC,AAAU,AAAE;AACzD,AAAM,SAAC,IAAI,AAAc,eAAC,AAAO,SAAE,AAAI,KAAC,AAAK,MAAC,AAAM,AAAC,SAAE,AAAI,AAAC,AAC9D;AAAC,AAED,AAAM;;AAAC,AAAK,4BAAuB,AAAe,SAAE,AAAY;AAC9D,QAAM,AAAE,KAAG,MAAM,AAAQ,SAAC,AAAO,AAAC;AAClC,AAAM,SAAC,MAAM,AAAE,GAAC,AAAQ,SAAC,AAAI,AAAC,AAChC;AAAC;;AAED,AAAK,gCAA2B,AAA0B,YAAE,AAAgB,UAAE,AAAU;AACtF,QAAM,AAAI,OAAG,AAAI,KAAC,AAAM;AACxB,QAAM,AAAM,SAAG,AAAM,OAAC,AAAW,YAAC,AAAI,AAAC;;AACvC,AAAE,AAAC,MAAC,AAAI,QAAI,AAAC,AAAC,GAAC,AAAC;AACd,AAAM,WAAC,AAAM,AACf;AAAC;;AAED,AAAE,AAAC,MAAC,AAAI,KAAC,AAAQ,AAAC,UAAC,AAAC;AAClB,AAAM,WAAC,MAAM,AAAQ,0BAAC,AAAI,KAAC,AAAI,AAAC,QAAG,AAAU,WAAC,AAAG,GAAW,aAAE,AAAQ,AAAC,AAAC,AAC1E;AAAC;;AAED,QAAM,AAAE,KAAG,MAAM,AAAI,sBAAC,AAAU,WAAC,AAAG,KAAE,AAAG,AAAC;;AAC1C,MAAI,AAAC;AACH,UAAM,AAAM,SAAG,AAAC,IAAG,AAAU,WAAC,AAAU,aAAG,AAAQ,SAAC,AAAI,KAAC,AAAQ,QAAE,AAAE,AAAC;AACtE,UAAM,AAAI,sBAAC,AAAE,IAAE,AAAM,QAAE,AAAC,GAAE,AAAI,MAAE,AAAM,AAAC,AACzC;AAAC,YACO,AAAC;AACP,UAAM,AAAK,uBAAC,AAAE,AAAC,AACjB;AAAC;;AACD,AAAM,SAAC,AAAM,AACf;AAAC","sourcesContent":["import { createFromBuffer } from \"chromium-pickle-js\"\nimport { close, open, read, readFile, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\n\n/** @internal */\nexport class Node {\n  // we don't use Map because later it will be stringified\n  files?: { [key: string]: Node }\n\n  unpacked?: boolean\n\n  size?: number\n  // electron expects string\n  offset?: string\n\n  executable?: boolean\n\n  link?: string\n}\n\n/** @internal */\nexport class AsarFilesystem {\n  private offset = 0\n\n  constructor(readonly src: string, readonly header = new Node(), readonly headerSize: number = -1) {\n    if (this.header.files == null) {\n      this.header.files = {}\n    }\n  }\n\n  searchNodeFromDirectory(p: string, isCreate: boolean): Node | null {\n    let node = this.header\n    for (const dir of p.split(path.sep)) {\n      if (dir !== \".\") {\n        let child = node.files![dir]\n        if (child == null) {\n          if (!isCreate) {\n            return null\n          }\n          child = new Node()\n          child.files = {}\n          node.files![dir] = child\n        }\n        node = child\n      }\n    }\n    return node\n  }\n\n  getOrCreateNode(p: string): Node {\n    if (p == null || p.length === 0) {\n      return this.header\n    }\n\n    const name = path.basename(p)\n    const dirNode = this.searchNodeFromDirectory(path.dirname(p), true)!\n    if (dirNode.files == null) {\n      dirNode.files = {}\n    }\n\n    let result = dirNode.files[name]\n    if (result == null) {\n      result = new Node()\n      dirNode.files[name] = result\n    }\n    return result\n  }\n\n  addFileNode(file: string, dirNode: Node, size: number, unpacked: boolean, stat: Stats): Node {\n    if (size > 4294967295) {\n      throw new Error(`${file}: file size cannot be larger than 4.2GB`)\n    }\n\n    const node = new Node()\n    node.size = size\n    if (unpacked) {\n      node.unpacked = true\n    }\n    else {\n      // electron expects string\n      node.offset = this.offset.toString()\n      if (process.platform !== \"win32\" && (stat.mode & 0o100)) {\n        node.executable = true\n      }\n      this.offset += node.size\n    }\n\n    let children = dirNode.files\n    if (children == null) {\n      children = {}\n      dirNode.files = children\n    }\n    children[path.basename(file)] = node\n\n    return node\n  }\n\n  getNode(p: string) {\n    const node = this.searchNodeFromDirectory(path.dirname(p), false)!\n    return node.files![path.basename(p)]\n  }\n\n  getFile(p: string, followLinks: boolean = true): Node {\n    const info = this.getNode(p)!\n    // if followLinks is false we don't resolve symlinks\n    return followLinks && info.link != null ? this.getFile(info.link) : info\n  }\n\n  async readJson(file: string): Promise<any> {\n    return JSON.parse((await this.readFile(file)).toString())\n  }\n\n  async readFile(file: string): Promise<Buffer> {\n    return await readFileFromAsar(this, file, this.getFile(file))\n  }\n}\n\nexport async function readAsar(archive: string): Promise<AsarFilesystem> {\n  const fd = await open(archive, \"r\")\n  let size\n  let headerBuf\n  try {\n    const sizeBuf = Buffer.allocUnsafe(8)\n    if (await read(fd, sizeBuf, 0, 8, null as any) !== 8) {\n      throw new Error(\"Unable to read header size\")\n    }\n\n    const sizePickle = createFromBuffer(sizeBuf)\n    size = sizePickle.createIterator().readUInt32()\n    headerBuf = Buffer.allocUnsafe(size)\n    if (await read(fd, headerBuf, 0, size, null as any) !== size) {\n      throw new Error(\"Unable to read header\")\n    }\n  }\n  finally {\n    await close(fd)\n  }\n\n  const headerPickle = createFromBuffer(headerBuf!)\n  const header = headerPickle.createIterator().readString()\n  return new AsarFilesystem(archive, JSON.parse(header), size)\n}\n\nexport async function readAsarJson(archive: string, file: string): Promise<any> {\n  const fs = await readAsar(archive)\n  return await fs.readJson(file)\n}\n\nasync function readFileFromAsar(filesystem: AsarFilesystem, filename: string, info: Node): Promise<Buffer> {\n  const size = info.size!!\n  const buffer = Buffer.allocUnsafe(size)\n  if (size <= 0) {\n    return buffer\n  }\n\n  if (info.unpacked) {\n    return await readFile(path.join(`${filesystem.src}.unpacked`, filename))\n  }\n\n  const fd = await open(filesystem.src, \"r\")\n  try {\n    const offset = 8 + filesystem.headerSize + parseInt(info.offset!!, 10)\n    await read(fd, buffer, 0, size, offset)\n  }\n  finally {\n    await close(fd)\n  }\n  return buffer\n}\n"]}
