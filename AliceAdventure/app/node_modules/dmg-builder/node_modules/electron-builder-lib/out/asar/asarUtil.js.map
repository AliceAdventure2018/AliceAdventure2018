{"version":3,"file":"asarUtil.js","sourceRoot":"","sources":["../../src/asar/asarUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AsyncTaskManager, log } from \"builder-util\"\nimport { FileCopier, Filter, MAX_FILE_REQUESTS } from \"builder-util/out/fs\"\nimport { createReadStream, createWriteStream, ensureDir, readFile, Stats, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AsarOptions } from \"..\"\nimport { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { getDestinationPath } from \"../util/appFileCopier\"\nimport { ResolvedFileSet } from \"../util/AppFileCopierHelper\"\nimport { AsarFilesystem, Node } from \"./asar\"\nimport { detectUnpackedDirs } from \"./unpackDetector\"\n\nconst pickle = require(\"chromium-pickle-js\")\n\n/** @internal */\nexport class AsarPackager {\n  private readonly fs = new AsarFilesystem(this.src)\n  private readonly outFile: string\n\n  constructor(private readonly src: string, private readonly destination: string, private readonly options: AsarOptions, private readonly unpackPattern: Filter | null) {\n    this.outFile = path.join(destination, \"app.asar\")\n  }\n\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  async pack(fileSets: Array<ResolvedFileSet>, packager: PlatformPackager<any>) {\n    if (this.options.ordering != null) {\n      // ordering doesn't support transformed files, but ordering is not used functionality - wait user report to fix it\n      await order(fileSets[0].files, this.options.ordering, fileSets[0].src)\n    }\n    await ensureDir(path.dirname(this.outFile))\n    const unpackedFileIndexMap = new Map<ResolvedFileSet, Set<number>>()\n    for (const fileSet of fileSets) {\n      unpackedFileIndexMap.set(fileSet, await this.createPackageFromFiles(fileSet, packager.info))\n    }\n    await this.writeAsarFile(fileSets, unpackedFileIndexMap)\n  }\n\n  private async createPackageFromFiles(fileSet: ResolvedFileSet, packager: Packager) {\n    const metadata = fileSet.metadata\n    // search auto unpacked dir\n    const unpackedDirs = new Set<string>()\n    const unpackedDest = `${this.outFile}.unpacked`\n    const rootForAppFilesWithoutAsar = path.join(this.destination, \"app\")\n\n    if (this.options.smartUnpack !== false) {\n      await detectUnpackedDirs(fileSet, unpackedDirs, unpackedDest, rootForAppFilesWithoutAsar)\n    }\n\n    const dirToCreateForUnpackedFiles = new Set<string>(unpackedDirs)\n\n    const correctDirNodeUnpackedFlag = async (filePathInArchive: string, dirNode: Node) => {\n      for (const dir of unpackedDirs) {\n        if (filePathInArchive.length > (dir.length + 2) && filePathInArchive[dir.length] === path.sep && filePathInArchive.startsWith(dir)) {\n          dirNode.unpacked = true\n          unpackedDirs.add(filePathInArchive)\n          // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n          // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n          await ensureDir(path.join(unpackedDest, filePathInArchive))\n          break\n        }\n      }\n    }\n\n    const transformedFiles = fileSet.transformedFiles\n    const taskManager = new AsyncTaskManager(packager.cancellationToken)\n    const fileCopier = new FileCopier()\n\n    let currentDirNode: Node | null = null\n    let currentDirPath: string | null = null\n\n    const unpackedFileIndexSet = new Set<number>()\n\n    for (let i = 0, n = fileSet.files.length; i < n; i++) {\n      const file = fileSet.files[i]\n      const stat = metadata.get(file)\n      if (stat == null) {\n        continue\n      }\n\n      const pathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(file, fileSet))\n\n      if (stat.isSymbolicLink()) {\n        this.fs.getOrCreateNode(pathInArchive).link = (stat as any).relativeLink\n        unpackedFileIndexSet.add(i)\n        continue\n      }\n\n      let fileParent = path.dirname(pathInArchive)\n      if (fileParent === \".\") {\n        fileParent = \"\"\n      }\n\n      if (currentDirPath !== fileParent) {\n        if (fileParent.startsWith(\"..\")) {\n          throw new Error(`Internal error: path must not start with \"..\": ${fileParent}`)\n        }\n\n        currentDirPath = fileParent\n        currentDirNode = this.fs.getOrCreateNode(fileParent)\n        // do not check for root\n        if (fileParent !== \"\" && !currentDirNode.unpacked) {\n          if (unpackedDirs.has(fileParent)) {\n            currentDirNode.unpacked = true\n          }\n          else {\n            await correctDirNodeUnpackedFlag(fileParent, currentDirNode)\n          }\n        }\n      }\n\n      const dirNode = currentDirNode!\n      const newData = transformedFiles == null ? null : transformedFiles.get(i)\n      const isUnpacked = dirNode.unpacked || (this.unpackPattern != null && this.unpackPattern(file, stat))\n      this.fs.addFileNode(file, dirNode, newData == null ? stat.size : Buffer.byteLength(newData), isUnpacked, stat)\n      if (isUnpacked) {\n        if (!dirNode.unpacked && !dirToCreateForUnpackedFiles.has(fileParent)) {\n          dirToCreateForUnpackedFiles.add(fileParent)\n          await ensureDir(path.join(unpackedDest, fileParent))\n        }\n\n        const unpackedFile = path.join(unpackedDest, pathInArchive)\n        taskManager.addTask(copyFileOrData(fileCopier, newData, file, unpackedFile, stat))\n        if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n          await taskManager.awaitTasks()\n        }\n\n        unpackedFileIndexSet.add(i)\n      }\n    }\n\n    if (taskManager.tasks.length > 0) {\n      await taskManager.awaitTasks()\n    }\n\n    return unpackedFileIndexSet\n  }\n\n  private writeAsarFile(fileSets: Array<ResolvedFileSet>, unpackedFileIndexMap: Map<ResolvedFileSet, Set<number>>): Promise<any> {\n    return new BluebirdPromise((resolve, reject) => {\n      const headerPickle = pickle.createEmpty()\n      headerPickle.writeString(JSON.stringify(this.fs.header))\n      const headerBuf = headerPickle.toBuffer()\n\n      const sizePickle = pickle.createEmpty()\n      sizePickle.writeUInt32(headerBuf.length)\n\n      const sizeBuf = sizePickle.toBuffer()\n      const writeStream = createWriteStream(this.outFile)\n      writeStream.on(\"error\", reject)\n      writeStream.on(\"close\", resolve)\n      writeStream.write(sizeBuf)\n\n      let fileSetIndex = 0\n\n      let files = fileSets[0].files\n      let metadata = fileSets[0].metadata\n      let transformedFiles = fileSets[0].transformedFiles\n      let unpackedFileIndexSet = unpackedFileIndexMap.get(fileSets[0])!!\n      const w = (index: number) => {\n        while (true) {\n          if (index >= files.length) {\n            if (++fileSetIndex >= fileSets.length) {\n              writeStream.end()\n              return\n            }\n            else {\n              files = fileSets[fileSetIndex].files\n              metadata = fileSets[fileSetIndex].metadata\n              transformedFiles = fileSets[fileSetIndex].transformedFiles\n              unpackedFileIndexSet = unpackedFileIndexMap.get(fileSets[fileSetIndex])!!\n              index = 0\n            }\n          }\n\n          if (!unpackedFileIndexSet.has(index)) {\n            break\n          }\n          index++\n        }\n\n        const data = transformedFiles == null ? null : transformedFiles.get(index)\n        const file = files[index]\n        if (data !== null && data !== undefined) {\n          writeStream.write(data, () => w(index + 1))\n          return\n        }\n\n        // https://github.com/yarnpkg/yarn/pull/3539\n        const stat = metadata.get(file)\n        if (stat != null && stat.size < (2 * 1024 * 1024)) {\n          readFile(file)\n            .then(it => {\n              writeStream.write(it, () => w(index + 1))\n            })\n            .catch(e => reject(`Cannot read file ${file}: ${e.stack || e}`))\n        }\n        else {\n          const readStream = createReadStream(file)\n          readStream.on(\"error\", reject)\n          readStream.once(\"end\", () => w(index + 1))\n          readStream.pipe(writeStream, {\n            end: false\n          })\n        }\n      }\n\n      writeStream.write(headerBuf, () => w(0))\n    })\n  }\n}\n\nexport function copyFileOrData(fileCopier: FileCopier, data: string | Buffer | undefined | null, source: string, destination: string, stats: Stats) {\n  if (data == null) {\n    return fileCopier.copy(source, destination, stats)\n  }\n  else {\n    return writeFile(destination, data)\n  }\n}\n\nasync function order(filenames: Array<string>, orderingFile: string, src: string) {\n  const orderingFiles = (await readFile(orderingFile, \"utf8\")).split(\"\\n\").map(line => {\n    if (line.indexOf(\":\") !== -1) {\n      line = line.split(\":\").pop()!\n    }\n    line = line.trim()\n    if (line[0] === \"/\") {\n      line = line.slice(1)\n    }\n    return line\n  })\n\n  const ordering: Array<string> = []\n  for (const file of orderingFiles) {\n    const pathComponents = file.split(path.sep)\n    for (const pathComponent of pathComponents) {\n      ordering.push(path.join(src, pathComponent))\n    }\n  }\n\n  const sortedFiles: Array<string> = []\n  let missing = 0\n  const total = filenames.length\n  for (const file of ordering) {\n    if (!sortedFiles.includes(file) && filenames.includes(file)) {\n      sortedFiles.push(file)\n    }\n  }\n  for (const file of filenames) {\n    if (!sortedFiles.includes(file)) {\n      sortedFiles.push(file)\n      missing += 1\n    }\n  }\n  log.info({coverage: ((total - missing) / total * 100)}, \"ordering files in ASAR archive\")\n  return sortedFiles\n}"]}
