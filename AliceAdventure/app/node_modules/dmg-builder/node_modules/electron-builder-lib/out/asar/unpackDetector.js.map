{"version":3,"file":"unpackDetector.js","sourceRoot":"","sources":["../../src/asar/unpackDetector.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { log } from \"builder-util\"\nimport { CONCURRENCY } from \"builder-util/out/fs\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { getDestinationPath } from \"../util/appFileCopier\"\nimport { NODE_MODULES_PATTERN, ResolvedFileSet } from \"../util/AppFileCopierHelper\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\n\nfunction addValue(map: Map<string, Array<string>>, key: string, value: string) {\n  let list = map.get(key)\n  if (list == null) {\n    list = [value]\n    map.set(key, list)\n  }\n  else {\n    list.push(value)\n  }\n}\n\n/** @internal */\nexport async function detectUnpackedDirs(fileSet: ResolvedFileSet, autoUnpackDirs: Set<string>, unpackedDest: string, rootForAppFilesWithoutAsar: string) {\n  const dirToCreate = new Map<string, Array<string>>()\n  const metadata = fileSet.metadata\n\n  function addParents(child: string, root: string) {\n    child = path.dirname(child)\n    if (autoUnpackDirs.has(child)) {\n      return\n    }\n\n    do {\n      autoUnpackDirs.add(child)\n      const p = path.dirname(child)\n      // create parent dir to be able to copy file later without directory existence check\n      addValue(dirToCreate, p, path.basename(child))\n\n      if (child === root || p === root || autoUnpackDirs.has(p)) {\n        break\n      }\n      child = p\n    }\n    while (true)\n\n    autoUnpackDirs.add(root)\n  }\n\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const file = fileSet.files[i]\n    const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      continue\n    }\n\n    let nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n    if (nextSlashIndex < 0) {\n      continue\n    }\n\n    if (file[index + NODE_MODULES_PATTERN.length] === \"@\") {\n      nextSlashIndex = file.indexOf(path.sep, nextSlashIndex + 1)\n    }\n\n    if (!metadata.get(file)!.isFile()) {\n      continue\n    }\n\n    const packageDir = file.substring(0, nextSlashIndex)\n    const packageDirPathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(packageDir, fileSet))\n    const pathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(file, fileSet))\n    if (autoUnpackDirs.has(packageDirPathInArchive)) {\n      // if package dir is unpacked, any file also unpacked\n      addParents(pathInArchive, packageDirPathInArchive)\n      continue\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/2679\n    let shouldUnpack = false\n    if (file.endsWith(\".dll\") || file.endsWith(\".exe\") || file.endsWith(\".dylib\")) {\n      shouldUnpack = true\n    }\n    else if (!file.includes(\".\", nextSlashIndex) && path.extname(file) === \"\") {\n      shouldUnpack = await isBinaryFile(file)\n    }\n\n    if (!shouldUnpack) {\n      continue\n    }\n\n    if (log.isDebugEnabled) {\n      log.debug({file: pathInArchive, reason: \"contains executable code\"}, \"not packed into asar archive\")\n    }\n\n    addParents(pathInArchive, packageDirPathInArchive)\n  }\n\n  if (dirToCreate.size > 0) {\n    await ensureDir(unpackedDest + path.sep + \"node_modules\")\n    // child directories should be not created asynchronously - parent directories should be created first\n    await BluebirdPromise.map(dirToCreate.keys(), async parentDir => {\n      const base = unpackedDest + path.sep + parentDir\n      await ensureDir(base)\n      await BluebirdPromise.each(dirToCreate.get(parentDir)!, (it): any => {\n        if (dirToCreate.has(parentDir + path.sep + it)) {\n          // already created\n          return null\n        }\n        else {\n          return ensureDir(base + path.sep + it)\n        }\n      })\n    }, CONCURRENCY)\n  }\n}"]}
