{"version":3,"file":"macPackager.js","sourceRoot":"","sources":["../src/macPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { deepAssign, Arch, AsyncTaskManager, exec, InvalidConfigurationError, log } from \"builder-util\"\nimport { signAsync, SignOptions } from \"electron-osx-sign\"\nimport { ensureDir, readdir, remove } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { asArray } from \"builder-util-runtime/out\"\nimport { AppInfo } from \"./appInfo\"\nimport { AsarIntegrity } from \"./asar/integrity\"\nimport { appleCertificatePrefixes, CertType, CodeSigningInfo, createKeychain, findIdentity, Identity, isSignAllowed, reportError } from \"./codeSign\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { MacConfiguration, MasConfiguration } from \"./options/macOptions\"\nimport { Packager } from \"./packager\"\nimport { createMacApp } from \"./packager/mac\"\nimport { chooseNotNull, PlatformPackager } from \"./platformPackager\"\nimport { ArchiveTarget } from \"./targets/ArchiveTarget\"\nimport { PkgTarget, prepareProductBuildArgs } from \"./targets/pkg\"\nimport { createCommonTarget, NoOpTarget } from \"./targets/targetFactory\"\nimport { CONCURRENCY } from \"builder-util/out/fs\"\n\nexport default class MacPackager extends PlatformPackager<MacConfiguration> {\n  readonly codeSigningInfo = new Lazy<CodeSigningInfo>(() => {\n    const cscLink = this.getCscLink()\n    if (cscLink == null || process.platform !== \"darwin\") {\n      return Promise.resolve({keychainName: process.env.CSC_KEYCHAIN || null})\n    }\n\n    return createKeychain({\n      tmpDir: this.info.tempDirManager,\n      cscLink,\n      cscKeyPassword: this.getCscPassword(),\n      cscILink: chooseNotNull(this.platformSpecificBuildOptions.cscInstallerLink, process.env.CSC_INSTALLER_LINK),\n      cscIKeyPassword: chooseNotNull(this.platformSpecificBuildOptions.cscInstallerKeyPassword, process.env.CSC_INSTALLER_KEY_PASSWORD),\n      currentDir: this.projectDir\n    })\n  })\n\n  private _iconPath = new Lazy(() => this.getOrConvertIcon(\"icns\"))\n\n  constructor(info: Packager) {\n    super(info, Platform.MAC)\n  }\n\n  get defaultTarget(): Array<string> {\n    const electronUpdaterCompatibility = this.platformSpecificBuildOptions.electronUpdaterCompatibility\n    return (electronUpdaterCompatibility == null || semver.satisfies(\"2.16.0\", electronUpdaterCompatibility)) ? [\"zip\", \"dmg\"] : [\"dmg\"]\n  }\n\n  protected prepareAppInfo(appInfo: AppInfo): AppInfo {\n    return new AppInfo(this.info, this.platformSpecificBuildOptions.bundleVersion)\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return this._iconPath.value\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    for (const name of targets) {\n      switch (name) {\n        case DIR_TARGET:\n          break\n\n        case \"dmg\":\n          const { DmgTarget } = require(\"dmg-builder\")\n          mapper(name, outDir => new DmgTarget(this, outDir))\n          break\n\n        case \"zip\":\n          // https://github.com/electron-userland/electron-builder/issues/2313\n          mapper(name, outDir => new ArchiveTarget(name, outDir, this, true))\n          break\n\n        case \"pkg\":\n          mapper(name, outDir => new PkgTarget(this, outDir))\n          break\n\n        default:\n          mapper(name, outDir => name === \"mas\" || name === \"mas-dev\" ? new NoOpTarget(name) : createCommonTarget(name, outDir, this))\n          break\n      }\n    }\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\" || it.name === \"mas-dev\")\n    const prepackaged = this.packagerOptions.prepackaged\n\n    if (!hasMas || targets.length > 1) {\n      const appPath = prepackaged == null ? path.join(this.computeAppOutDir(outDir, arch), `${this.appInfo.productFilename}.app`) : prepackaged\n      nonMasPromise = (prepackaged ? Promise.resolve() : this.doPack(outDir, path.dirname(appPath), this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets))\n        .then(() => this.sign(appPath, null, null))\n        .then(() => this.packageInDistributableFormat(appPath, Arch.x64, targets, taskManager))\n    }\n\n    for (const target of targets) {\n      const targetName = target.name\n      if (!(targetName === \"mas\" || targetName === \"mas-dev\")) {\n        continue\n      }\n\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (this.config as any).mas)\n      if (targetName === \"mas-dev\") {\n        deepAssign(masBuildOptions, (this.config as any)[targetName], {\n          type: \"development\",\n        })\n      }\n\n      const targetOutDir = path.join(outDir, targetName)\n      if (prepackaged == null) {\n        await this.doPack(outDir, targetOutDir, \"mas\", arch, masBuildOptions, [target])\n        await this.sign(path.join(targetOutDir, `${this.appInfo.productFilename}.app`), targetOutDir, masBuildOptions)\n      }\n      else {\n        await this.sign(prepackaged, targetOutDir, masBuildOptions)\n      }\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appPath: string, outDir: string | null, masOptions: MasConfiguration | null): Promise<void> {\n    if (!isSignAllowed()) {\n      return\n    }\n\n    const isMas = masOptions != null\n    const macOptions = this.platformSpecificBuildOptions\n    const qualifier = (isMas ? masOptions!.identity : null) || macOptions.identity\n\n    if (!isMas && qualifier === null) {\n      if (this.forceCodeSigning) {\n        throw new InvalidConfigurationError(\"identity explicitly is set to null, but forceCodeSigning is set to true\")\n      }\n      log.info({reason: \"identity explicitly is set to null\"}, \"skipped macOS code signing\")\n      return\n    }\n\n    const keychainName = (await this.codeSigningInfo.value).keychainName\n    const explicitType = isMas ? masOptions!.type : macOptions.type\n    const type = explicitType || \"distribution\"\n    const isDevelopment = type === \"development\"\n    const certificateType = getCertificateType(isMas, isDevelopment)\n    let identity = await findIdentity(certificateType, qualifier, keychainName)\n    if (identity == null) {\n      if (!isMas && !isDevelopment && explicitType !== \"distribution\") {\n        identity = await findIdentity(\"Mac Developer\", qualifier, keychainName)\n        if (identity != null) {\n          log.warn(\"Mac Developer is used to sign app — it is only for development and testing, not for production\")\n        }\n      }\n\n      if (identity == null) {\n        await reportError(isMas, certificateType, qualifier, keychainName, this.forceCodeSigning)\n        return\n      }\n    }\n\n    const signOptions: any = {\n      \"identity-validation\": false,\n      // https://github.com/electron-userland/electron-builder/issues/1699\n      // kext are signed by the chipset manufacturers. You need a special certificate (only available on request) from Apple to be able to sign kext.\n      ignore: (file: string) => {\n        return file.endsWith(\".kext\") || file.startsWith(\"/Contents/PlugIns\", appPath.length) ||\n          // https://github.com/electron-userland/electron-builder/issues/2010\n          file.includes(\"/node_modules/puppeteer/.local-chromium\")\n      },\n      identity: identity!,\n      type,\n      platform: isMas ? \"mas\" : \"darwin\",\n      version: this.config.electronVersion,\n      app: appPath,\n      keychain: keychainName || undefined,\n      binaries: (isMas && masOptions != null ? masOptions.binaries : macOptions.binaries) || undefined,\n      requirements: isMas || macOptions.requirements == null ? undefined : await this.getResource(macOptions.requirements),\n      \"gatekeeper-assess\": appleCertificatePrefixes.find(it => identity!.name.startsWith(it)) != null\n    }\n\n    await this.adjustSignOptions(signOptions, masOptions)\n    log.info({\n      file: log.filePath(appPath),\n      identityName: identity.name,\n      identityHash: identity.hash,\n    }, \"signing\")\n    await this.doSign(signOptions)\n\n    // https://github.com/electron-userland/electron-builder/issues/1196#issuecomment-312310209\n    if (masOptions != null && !isDevelopment) {\n      const certType = isDevelopment ? \"Mac Developer\" : \"3rd Party Mac Developer Installer\"\n      const masInstallerIdentity = await findIdentity(certType, masOptions.identity, keychainName)\n      if (masInstallerIdentity == null) {\n        throw new InvalidConfigurationError(`Cannot find valid \"${certType}\" identity to sign MAS installer, please see https://electron.build/code-signing`)\n      }\n\n      const artifactName = this.expandArtifactNamePattern(masOptions, \"pkg\")\n      const artifactPath = path.join(outDir!, artifactName)\n      await this.doFlat(appPath, artifactPath, masInstallerIdentity, keychainName)\n      this.dispatchArtifactCreated(artifactPath, null, Arch.x64, this.computeSafeArtifactName(artifactName, \"pkg\"))\n    }\n  }\n\n  private async adjustSignOptions(signOptions: any, masOptions: MasConfiguration | null) {\n    const resourceList = await this.resourceList\n    if (resourceList.includes(`entitlements.osx.plist`)) {\n      throw new InvalidConfigurationError(\"entitlements.osx.plist is deprecated name, please use entitlements.mac.plist\")\n    }\n    if (resourceList.includes(`entitlements.osx.inherit.plist`)) {\n      throw new InvalidConfigurationError(\"entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist\")\n    }\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    const entitlementsSuffix = masOptions == null ? \"mac\" : \"mas\"\n    if (customSignOptions.entitlements == null) {\n      const p = `entitlements.${entitlementsSuffix}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.info.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n\n    if (customSignOptions.entitlementsInherit == null) {\n      const p = `entitlements.${entitlementsSuffix}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.info.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(appPath: string, outFile: string, identity: Identity, keychain: string | null | undefined): Promise<any> {\n    // productbuild doesn't created directory for out file\n    await ensureDir(path.dirname(outFile))\n\n    const args = prepareProductBuildArgs(identity, keychain)\n    args.push(\"--component\", appPath, \"/Applications\")\n    args.push(outFile)\n    return await exec(\"productbuild\", args)\n  }\n\n  public getElectronSrcDir(dist: string) {\n    return path.resolve(this.projectDir, dist, this.electronDistMacOsAppName)\n  }\n\n  public getElectronDestinationDir(appOutDir: string) {\n    return path.join(appOutDir, this.electronDistMacOsAppName)\n  }\n\n  protected async beforeCopyExtraFiles(appOutDir: string, asarIntegrity: AsarIntegrity | null): Promise<any> {\n    await createMacApp(this, appOutDir, asarIntegrity)\n\n    const wantedLanguages = asArray(this.platformSpecificBuildOptions.electronLanguages)\n    if (wantedLanguages.length === 0) {\n      return\n    }\n\n    // noinspection SpellCheckingInspection\n    const langFileExt = \".lproj\"\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await BluebirdPromise.map(readdir(resourcesDir), file => {\n      if (!file.endsWith(langFileExt)) {\n        return\n      }\n\n      const language = file.substring(0, file.length - langFileExt.length)\n      if (!wantedLanguages.includes(language)) {\n        return remove(path.join(resourcesDir, file))\n      }\n      return\n    }, CONCURRENCY)\n  }\n}\n\nfunction getCertificateType(isMas: boolean, isDevelopment: boolean): CertType {\n  if (isDevelopment) {\n    return \"Mac Developer\"\n  }\n  return isMas ? \"3rd Party Mac Developer Application\" : \"Developer ID Application\"\n}"]}
