{"version":3,"file":"rfc2253Parser.js","sourceRoot":"","sources":["../src/rfc2253Parser.ts"],"names":[],"mappings":"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","sourcesContent":["export function parseDn(seq: string): Map<string, string> {\n  let quoted = false\n  let key: string | null = null\n  let token = \"\"\n  let nextNonSpace = 0\n\n  seq = seq.trim()\n  const result = new Map<string, string>()\n  for (let i = 0; i <= seq.length; i++) {\n    if (i === seq.length) {\n      if (key !== null) {\n        result.set(key, token)\n      }\n      break\n    }\n\n    const ch = seq[i]\n    if (quoted) {\n      if (ch === '\"') {\n        quoted = false\n        continue\n      }\n    }\n    else {\n      if (ch === '\"') {\n        quoted = true\n        continue\n      }\n\n      if (ch === \"\\\\\") {\n        i++\n        const ord = parseInt(seq.slice(i, i + 2), 16)\n        if (Number.isNaN(ord)) {\n          token += seq[i]\n        }\n        else {\n          i++\n          token += String.fromCharCode(ord)\n        }\n        continue\n      }\n\n      if (key === null && ch === \"=\") {\n        key = token\n        token = \"\"\n        continue\n      }\n\n      if (ch === \",\" || ch === \";\" || ch === \"+\") {\n        if (key !== null) {\n          result.set(key, token)\n        }\n        key = null\n        token = \"\"\n        continue\n      }\n    }\n\n    if (ch === \" \" && !quoted) {\n      if (token.length === 0) {\n        continue\n      }\n\n      if (i > nextNonSpace) {\n        let j = i\n        while (seq[j] === \" \") {\n          j++\n        }\n        nextNonSpace = j\n      }\n\n      if (nextNonSpace >= seq.length\n        || seq[nextNonSpace] === \",\"\n        || seq[nextNonSpace] === \";\"\n        || (key === null && seq[nextNonSpace] === \"=\")\n        || (key !== null && seq[nextNonSpace] === \"+\")\n      ) {\n        i = nextNonSpace - 1\n        continue\n      }\n    }\n\n    token += ch\n  }\n\n  return result\n}"]}
